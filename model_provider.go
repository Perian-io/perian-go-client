/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.2.8
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package perian

import (
	"encoding/json"
	"time"
)

// checks if the Provider type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Provider{}

// Provider Provider database model.
type Provider struct {
	Id *string `json:"id,omitempty"`
	Name NullableProviderName `json:"name,omitempty"`
	NameShort NullableString `json:"name_short,omitempty"`
	Regions []Region `json:"regions,omitempty"`
	Location *Location `json:"location,omitempty"`
	Status *Status `json:"status,omitempty"`
	Capabilities []ProviderCapabilities `json:"capabilities,omitempty"`
	Properties *ProviderProperties `json:"properties,omitempty"`
	CreatedAt *time.Time `json:"created_at,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// NewProvider instantiates a new Provider object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProvider() *Provider {
	this := Provider{}
	var location Location = UNDEFINED
	this.Location = &location
	var status Status = UNDEFINED
	this.Status = &status
	var properties ProviderProperties = {compute_billing_granularity=UNDEFINED}
	this.Properties = &properties
	return &this
}

// NewProviderWithDefaults instantiates a new Provider object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProviderWithDefaults() *Provider {
	this := Provider{}
	var location Location = UNDEFINED
	this.Location = &location
	var status Status = UNDEFINED
	this.Status = &status
	var properties ProviderProperties = {compute_billing_granularity=UNDEFINED}
	this.Properties = &properties
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Provider) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Provider) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Provider) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Provider) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Provider) GetName() ProviderName {
	if o == nil || IsNil(o.Name.Get()) {
		var ret ProviderName
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Provider) GetNameOk() (*ProviderName, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *Provider) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableProviderName and assigns it to the Name field.
func (o *Provider) SetName(v ProviderName) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *Provider) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *Provider) UnsetName() {
	o.Name.Unset()
}

// GetNameShort returns the NameShort field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Provider) GetNameShort() string {
	if o == nil || IsNil(o.NameShort.Get()) {
		var ret string
		return ret
	}
	return *o.NameShort.Get()
}

// GetNameShortOk returns a tuple with the NameShort field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Provider) GetNameShortOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NameShort.Get(), o.NameShort.IsSet()
}

// HasNameShort returns a boolean if a field has been set.
func (o *Provider) HasNameShort() bool {
	if o != nil && o.NameShort.IsSet() {
		return true
	}

	return false
}

// SetNameShort gets a reference to the given NullableString and assigns it to the NameShort field.
func (o *Provider) SetNameShort(v string) {
	o.NameShort.Set(&v)
}
// SetNameShortNil sets the value for NameShort to be an explicit nil
func (o *Provider) SetNameShortNil() {
	o.NameShort.Set(nil)
}

// UnsetNameShort ensures that no value is present for NameShort, not even an explicit nil
func (o *Provider) UnsetNameShort() {
	o.NameShort.Unset()
}

// GetRegions returns the Regions field value if set, zero value otherwise.
func (o *Provider) GetRegions() []Region {
	if o == nil || IsNil(o.Regions) {
		var ret []Region
		return ret
	}
	return o.Regions
}

// GetRegionsOk returns a tuple with the Regions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Provider) GetRegionsOk() ([]Region, bool) {
	if o == nil || IsNil(o.Regions) {
		return nil, false
	}
	return o.Regions, true
}

// HasRegions returns a boolean if a field has been set.
func (o *Provider) HasRegions() bool {
	if o != nil && !IsNil(o.Regions) {
		return true
	}

	return false
}

// SetRegions gets a reference to the given []Region and assigns it to the Regions field.
func (o *Provider) SetRegions(v []Region) {
	o.Regions = v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *Provider) GetLocation() Location {
	if o == nil || IsNil(o.Location) {
		var ret Location
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Provider) GetLocationOk() (*Location, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *Provider) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given Location and assigns it to the Location field.
func (o *Provider) SetLocation(v Location) {
	o.Location = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Provider) GetStatus() Status {
	if o == nil || IsNil(o.Status) {
		var ret Status
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Provider) GetStatusOk() (*Status, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Provider) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given Status and assigns it to the Status field.
func (o *Provider) SetStatus(v Status) {
	o.Status = &v
}

// GetCapabilities returns the Capabilities field value if set, zero value otherwise.
func (o *Provider) GetCapabilities() []ProviderCapabilities {
	if o == nil || IsNil(o.Capabilities) {
		var ret []ProviderCapabilities
		return ret
	}
	return o.Capabilities
}

// GetCapabilitiesOk returns a tuple with the Capabilities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Provider) GetCapabilitiesOk() ([]ProviderCapabilities, bool) {
	if o == nil || IsNil(o.Capabilities) {
		return nil, false
	}
	return o.Capabilities, true
}

// HasCapabilities returns a boolean if a field has been set.
func (o *Provider) HasCapabilities() bool {
	if o != nil && !IsNil(o.Capabilities) {
		return true
	}

	return false
}

// SetCapabilities gets a reference to the given []ProviderCapabilities and assigns it to the Capabilities field.
func (o *Provider) SetCapabilities(v []ProviderCapabilities) {
	o.Capabilities = v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *Provider) GetProperties() ProviderProperties {
	if o == nil || IsNil(o.Properties) {
		var ret ProviderProperties
		return ret
	}
	return *o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Provider) GetPropertiesOk() (*ProviderProperties, bool) {
	if o == nil || IsNil(o.Properties) {
		return nil, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *Provider) HasProperties() bool {
	if o != nil && !IsNil(o.Properties) {
		return true
	}

	return false
}

// SetProperties gets a reference to the given ProviderProperties and assigns it to the Properties field.
func (o *Provider) SetProperties(v ProviderProperties) {
	o.Properties = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *Provider) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Provider) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *Provider) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *Provider) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *Provider) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Provider) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *Provider) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *Provider) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

func (o Provider) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Provider) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.NameShort.IsSet() {
		toSerialize["name_short"] = o.NameShort.Get()
	}
	if !IsNil(o.Regions) {
		toSerialize["regions"] = o.Regions
	}
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Capabilities) {
		toSerialize["capabilities"] = o.Capabilities
	}
	if !IsNil(o.Properties) {
		toSerialize["properties"] = o.Properties
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	return toSerialize, nil
}

type NullableProvider struct {
	value *Provider
	isSet bool
}

func (v NullableProvider) Get() *Provider {
	return v.value
}

func (v *NullableProvider) Set(val *Provider) {
	v.value = val
	v.isSet = true
}

func (v NullableProvider) IsSet() bool {
	return v.isSet
}

func (v *NullableProvider) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProvider(val *Provider) *NullableProvider {
	return &NullableProvider{value: val, isSet: true}
}

func (v NullableProvider) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProvider) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


