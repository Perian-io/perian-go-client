/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.2.8
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package perian

import (
	"encoding/json"
	"fmt"
)

// OrderCriterion Enum for ordering criterion.
type OrderCriterion string

// List of OrderCriterion
const (
	PRICE OrderCriterion = "PRICE"
	CREATED_AT OrderCriterion = "CREATED_AT"
)

// All allowed values of OrderCriterion enum
var AllowedOrderCriterionEnumValues = []OrderCriterion{
	"PRICE",
	"CREATED_AT",
}

func (v *OrderCriterion) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OrderCriterion(value)
	for _, existing := range AllowedOrderCriterionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OrderCriterion", value)
}

// NewOrderCriterionFromValue returns a pointer to a valid OrderCriterion
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOrderCriterionFromValue(v string) (*OrderCriterion, error) {
	ev := OrderCriterion(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OrderCriterion: valid values are %v", v, AllowedOrderCriterionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OrderCriterion) IsValid() bool {
	for _, existing := range AllowedOrderCriterionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OrderCriterion value
func (v OrderCriterion) Ptr() *OrderCriterion {
	return &v
}

type NullableOrderCriterion struct {
	value *OrderCriterion
	isSet bool
}

func (v NullableOrderCriterion) Get() *OrderCriterion {
	return v.value
}

func (v *NullableOrderCriterion) Set(val *OrderCriterion) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderCriterion) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderCriterion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderCriterion(val *OrderCriterion) *NullableOrderCriterion {
	return &NullableOrderCriterion{value: val, isSet: true}
}

func (v NullableOrderCriterion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderCriterion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

