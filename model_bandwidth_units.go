/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.2.8
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package perian

import (
	"encoding/json"
	"fmt"
)

// BandwidthUnits Enum class representing different units of bandwidth.
type BandwidthUnits string

// List of BandwidthUnits
const (
	BANDWIDTHUNITS_MBITS BandwidthUnits = "Mbits"
	BANDWIDTHUNITS_GBITS BandwidthUnits = "Gbits"
	BANDWIDTHUNITS_GBS BandwidthUnits = "Gbs"
	BANDWIDTHUNITS_MBS BandwidthUnits = "Mbs"
	BANDWIDTHUNITS_GHZ BandwidthUnits = "Ghz"
	BANDWIDTHUNITS_MHZ BandwidthUnits = "Mhz"
	BANDWIDTHUNITS_IOPS BandwidthUnits = "Iops"
	BANDWIDTHUNITS_UNDEFINED BandwidthUnits = "Undefined"
)

// All allowed values of BandwidthUnits enum
var AllowedBandwidthUnitsEnumValues = []BandwidthUnits{
	"Mbits",
	"Gbits",
	"Gbs",
	"Mbs",
	"Ghz",
	"Mhz",
	"Iops",
	"Undefined",
}

func (v *BandwidthUnits) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BandwidthUnits(value)
	for _, existing := range AllowedBandwidthUnitsEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BandwidthUnits", value)
}

// NewBandwidthUnitsFromValue returns a pointer to a valid BandwidthUnits
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBandwidthUnitsFromValue(v string) (*BandwidthUnits, error) {
	ev := BandwidthUnits(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BandwidthUnits: valid values are %v", v, AllowedBandwidthUnitsEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BandwidthUnits) IsValid() bool {
	for _, existing := range AllowedBandwidthUnitsEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BandwidthUnits value
func (v BandwidthUnits) Ptr() *BandwidthUnits {
	return &v
}

type NullableBandwidthUnits struct {
	value *BandwidthUnits
	isSet bool
}

func (v NullableBandwidthUnits) Get() *BandwidthUnits {
	return v.value
}

func (v *NullableBandwidthUnits) Set(val *BandwidthUnits) {
	v.value = val
	v.isSet = true
}

func (v NullableBandwidthUnits) IsSet() bool {
	return v.isSet
}

func (v *NullableBandwidthUnits) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBandwidthUnits(val *BandwidthUnits) *NullableBandwidthUnits {
	return &NullableBandwidthUnits{value: val, isSet: true}
}

func (v NullableBandwidthUnits) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBandwidthUnits) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

