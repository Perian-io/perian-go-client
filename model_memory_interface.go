/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.2.8
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package perian

import (
	"encoding/json"
	"fmt"
)

// MemoryInterface Enum class representing memory interfaces.
type MemoryInterface string

// List of MemoryInterface
const (
	MEMORYINTERFACE_HBM2 MemoryInterface = "Hbm2"
	MEMORYINTERFACE_UNDEFINED MemoryInterface = "Undefined"
)

// All allowed values of MemoryInterface enum
var AllowedMemoryInterfaceEnumValues = []MemoryInterface{
	"Hbm2",
	"Undefined",
}

func (v *MemoryInterface) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MemoryInterface(value)
	for _, existing := range AllowedMemoryInterfaceEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MemoryInterface", value)
}

// NewMemoryInterfaceFromValue returns a pointer to a valid MemoryInterface
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMemoryInterfaceFromValue(v string) (*MemoryInterface, error) {
	ev := MemoryInterface(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MemoryInterface: valid values are %v", v, AllowedMemoryInterfaceEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MemoryInterface) IsValid() bool {
	for _, existing := range AllowedMemoryInterfaceEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MemoryInterface value
func (v MemoryInterface) Ptr() *MemoryInterface {
	return &v
}

type NullableMemoryInterface struct {
	value *MemoryInterface
	isSet bool
}

func (v NullableMemoryInterface) Get() *MemoryInterface {
	return v.value
}

func (v *NullableMemoryInterface) Set(val *MemoryInterface) {
	v.value = val
	v.isSet = true
}

func (v NullableMemoryInterface) IsSet() bool {
	return v.isSet
}

func (v *NullableMemoryInterface) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMemoryInterface(val *MemoryInterface) *NullableMemoryInterface {
	return &NullableMemoryInterface{value: val, isSet: true}
}

func (v NullableMemoryInterface) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMemoryInterface) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

