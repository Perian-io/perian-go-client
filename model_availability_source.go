/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.2.8
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package perian

import (
	"encoding/json"
	"fmt"
)

// AvailabilitySource Enum class representing the availability sources.
type AvailabilitySource string

// List of AvailabilitySource
const (
	PROVIDER AvailabilitySource = "Provider"
	OPTIMIZER AvailabilitySource = "Optimizer"
	PROVIDER_QUOTA AvailabilitySource = "Provider_Quota"
	UNDEFINED AvailabilitySource = "Undefined"
)

// All allowed values of AvailabilitySource enum
var AllowedAvailabilitySourceEnumValues = []AvailabilitySource{
	"Provider",
	"Optimizer",
	"Provider_Quota",
	"Undefined",
}

func (v *AvailabilitySource) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AvailabilitySource(value)
	for _, existing := range AllowedAvailabilitySourceEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AvailabilitySource", value)
}

// NewAvailabilitySourceFromValue returns a pointer to a valid AvailabilitySource
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAvailabilitySourceFromValue(v string) (*AvailabilitySource, error) {
	ev := AvailabilitySource(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AvailabilitySource: valid values are %v", v, AllowedAvailabilitySourceEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AvailabilitySource) IsValid() bool {
	for _, existing := range AllowedAvailabilitySourceEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AvailabilitySource value
func (v AvailabilitySource) Ptr() *AvailabilitySource {
	return &v
}

type NullableAvailabilitySource struct {
	value *AvailabilitySource
	isSet bool
}

func (v NullableAvailabilitySource) Get() *AvailabilitySource {
	return v.value
}

func (v *NullableAvailabilitySource) Set(val *AvailabilitySource) {
	v.value = val
	v.isSet = true
}

func (v NullableAvailabilitySource) IsSet() bool {
	return v.isSet
}

func (v *NullableAvailabilitySource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAvailabilitySource(val *AvailabilitySource) *NullableAvailabilitySource {
	return &NullableAvailabilitySource{value: val, isSet: true}
}

func (v NullableAvailabilitySource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAvailabilitySource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

