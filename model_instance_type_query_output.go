/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.2.8
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package perian

import (
	"encoding/json"
)

// checks if the InstanceTypeQueryOutput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InstanceTypeQueryOutput{}

// InstanceTypeQueryOutput Query for the instance type attribute.
type InstanceTypeQueryOutput struct {
	Operator NullableOperator `json:"operator,omitempty"`
	Options NullableQueryOptions `json:"options,omitempty"`
	All *bool `json:"all,omitempty"`
	Id NullableId `json:"id,omitempty"`
	Region NullableRegionQueryOutput `json:"region,omitempty"`
	Zone NullableZoneQueryOutput `json:"zone,omitempty"`
	Name NullableString `json:"name,omitempty"`
	Cpu NullableCpuQueryOutput `json:"cpu,omitempty"`
	Accelerator NullableAcceleratorQueryOutput `json:"accelerator,omitempty"`
	Ram NullableMemoryQueryOutput `json:"ram,omitempty"`
	Storage NullableStorageQueryOutput `json:"storage,omitempty"`
	Network NullableNetworkQueryOutput `json:"network,omitempty"`
	Price NullablePriceQueryOutput `json:"price,omitempty"`
	Availability NullableAvailabilityQueryOutput `json:"availability,omitempty"`
	Type NullableString `json:"type,omitempty"`
	BillingGranularity NullableString `json:"billing_granularity,omitempty"`
	Provider NullableProviderQueryOutput `json:"provider,omitempty"`
	ReferenceId NullableReferenceIdQueryOutput `json:"reference_id,omitempty"`
	AttributesHash NullableAttributesHash `json:"attributes_hash,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _InstanceTypeQueryOutput InstanceTypeQueryOutput

// NewInstanceTypeQueryOutput instantiates a new InstanceTypeQueryOutput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstanceTypeQueryOutput() *InstanceTypeQueryOutput {
	this := InstanceTypeQueryOutput{}
	var all bool = false
	this.All = &all
	return &this
}

// NewInstanceTypeQueryOutputWithDefaults instantiates a new InstanceTypeQueryOutput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstanceTypeQueryOutputWithDefaults() *InstanceTypeQueryOutput {
	this := InstanceTypeQueryOutput{}
	var all bool = false
	this.All = &all
	return &this
}

// GetOperator returns the Operator field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InstanceTypeQueryOutput) GetOperator() Operator {
	if o == nil || IsNil(o.Operator.Get()) {
		var ret Operator
		return ret
	}
	return *o.Operator.Get()
}

// GetOperatorOk returns a tuple with the Operator field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InstanceTypeQueryOutput) GetOperatorOk() (*Operator, bool) {
	if o == nil {
		return nil, false
	}
	return o.Operator.Get(), o.Operator.IsSet()
}

// HasOperator returns a boolean if a field has been set.
func (o *InstanceTypeQueryOutput) HasOperator() bool {
	if o != nil && o.Operator.IsSet() {
		return true
	}

	return false
}

// SetOperator gets a reference to the given NullableOperator and assigns it to the Operator field.
func (o *InstanceTypeQueryOutput) SetOperator(v Operator) {
	o.Operator.Set(&v)
}
// SetOperatorNil sets the value for Operator to be an explicit nil
func (o *InstanceTypeQueryOutput) SetOperatorNil() {
	o.Operator.Set(nil)
}

// UnsetOperator ensures that no value is present for Operator, not even an explicit nil
func (o *InstanceTypeQueryOutput) UnsetOperator() {
	o.Operator.Unset()
}

// GetOptions returns the Options field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InstanceTypeQueryOutput) GetOptions() QueryOptions {
	if o == nil || IsNil(o.Options.Get()) {
		var ret QueryOptions
		return ret
	}
	return *o.Options.Get()
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InstanceTypeQueryOutput) GetOptionsOk() (*QueryOptions, bool) {
	if o == nil {
		return nil, false
	}
	return o.Options.Get(), o.Options.IsSet()
}

// HasOptions returns a boolean if a field has been set.
func (o *InstanceTypeQueryOutput) HasOptions() bool {
	if o != nil && o.Options.IsSet() {
		return true
	}

	return false
}

// SetOptions gets a reference to the given NullableQueryOptions and assigns it to the Options field.
func (o *InstanceTypeQueryOutput) SetOptions(v QueryOptions) {
	o.Options.Set(&v)
}
// SetOptionsNil sets the value for Options to be an explicit nil
func (o *InstanceTypeQueryOutput) SetOptionsNil() {
	o.Options.Set(nil)
}

// UnsetOptions ensures that no value is present for Options, not even an explicit nil
func (o *InstanceTypeQueryOutput) UnsetOptions() {
	o.Options.Unset()
}

// GetAll returns the All field value if set, zero value otherwise.
func (o *InstanceTypeQueryOutput) GetAll() bool {
	if o == nil || IsNil(o.All) {
		var ret bool
		return ret
	}
	return *o.All
}

// GetAllOk returns a tuple with the All field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceTypeQueryOutput) GetAllOk() (*bool, bool) {
	if o == nil || IsNil(o.All) {
		return nil, false
	}
	return o.All, true
}

// HasAll returns a boolean if a field has been set.
func (o *InstanceTypeQueryOutput) HasAll() bool {
	if o != nil && !IsNil(o.All) {
		return true
	}

	return false
}

// SetAll gets a reference to the given bool and assigns it to the All field.
func (o *InstanceTypeQueryOutput) SetAll(v bool) {
	o.All = &v
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InstanceTypeQueryOutput) GetId() Id {
	if o == nil || IsNil(o.Id.Get()) {
		var ret Id
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InstanceTypeQueryOutput) GetIdOk() (*Id, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *InstanceTypeQueryOutput) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableId and assigns it to the Id field.
func (o *InstanceTypeQueryOutput) SetId(v Id) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *InstanceTypeQueryOutput) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *InstanceTypeQueryOutput) UnsetId() {
	o.Id.Unset()
}

// GetRegion returns the Region field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InstanceTypeQueryOutput) GetRegion() RegionQueryOutput {
	if o == nil || IsNil(o.Region.Get()) {
		var ret RegionQueryOutput
		return ret
	}
	return *o.Region.Get()
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InstanceTypeQueryOutput) GetRegionOk() (*RegionQueryOutput, bool) {
	if o == nil {
		return nil, false
	}
	return o.Region.Get(), o.Region.IsSet()
}

// HasRegion returns a boolean if a field has been set.
func (o *InstanceTypeQueryOutput) HasRegion() bool {
	if o != nil && o.Region.IsSet() {
		return true
	}

	return false
}

// SetRegion gets a reference to the given NullableRegionQueryOutput and assigns it to the Region field.
func (o *InstanceTypeQueryOutput) SetRegion(v RegionQueryOutput) {
	o.Region.Set(&v)
}
// SetRegionNil sets the value for Region to be an explicit nil
func (o *InstanceTypeQueryOutput) SetRegionNil() {
	o.Region.Set(nil)
}

// UnsetRegion ensures that no value is present for Region, not even an explicit nil
func (o *InstanceTypeQueryOutput) UnsetRegion() {
	o.Region.Unset()
}

// GetZone returns the Zone field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InstanceTypeQueryOutput) GetZone() ZoneQueryOutput {
	if o == nil || IsNil(o.Zone.Get()) {
		var ret ZoneQueryOutput
		return ret
	}
	return *o.Zone.Get()
}

// GetZoneOk returns a tuple with the Zone field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InstanceTypeQueryOutput) GetZoneOk() (*ZoneQueryOutput, bool) {
	if o == nil {
		return nil, false
	}
	return o.Zone.Get(), o.Zone.IsSet()
}

// HasZone returns a boolean if a field has been set.
func (o *InstanceTypeQueryOutput) HasZone() bool {
	if o != nil && o.Zone.IsSet() {
		return true
	}

	return false
}

// SetZone gets a reference to the given NullableZoneQueryOutput and assigns it to the Zone field.
func (o *InstanceTypeQueryOutput) SetZone(v ZoneQueryOutput) {
	o.Zone.Set(&v)
}
// SetZoneNil sets the value for Zone to be an explicit nil
func (o *InstanceTypeQueryOutput) SetZoneNil() {
	o.Zone.Set(nil)
}

// UnsetZone ensures that no value is present for Zone, not even an explicit nil
func (o *InstanceTypeQueryOutput) UnsetZone() {
	o.Zone.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InstanceTypeQueryOutput) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InstanceTypeQueryOutput) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *InstanceTypeQueryOutput) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *InstanceTypeQueryOutput) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *InstanceTypeQueryOutput) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *InstanceTypeQueryOutput) UnsetName() {
	o.Name.Unset()
}

// GetCpu returns the Cpu field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InstanceTypeQueryOutput) GetCpu() CpuQueryOutput {
	if o == nil || IsNil(o.Cpu.Get()) {
		var ret CpuQueryOutput
		return ret
	}
	return *o.Cpu.Get()
}

// GetCpuOk returns a tuple with the Cpu field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InstanceTypeQueryOutput) GetCpuOk() (*CpuQueryOutput, bool) {
	if o == nil {
		return nil, false
	}
	return o.Cpu.Get(), o.Cpu.IsSet()
}

// HasCpu returns a boolean if a field has been set.
func (o *InstanceTypeQueryOutput) HasCpu() bool {
	if o != nil && o.Cpu.IsSet() {
		return true
	}

	return false
}

// SetCpu gets a reference to the given NullableCpuQueryOutput and assigns it to the Cpu field.
func (o *InstanceTypeQueryOutput) SetCpu(v CpuQueryOutput) {
	o.Cpu.Set(&v)
}
// SetCpuNil sets the value for Cpu to be an explicit nil
func (o *InstanceTypeQueryOutput) SetCpuNil() {
	o.Cpu.Set(nil)
}

// UnsetCpu ensures that no value is present for Cpu, not even an explicit nil
func (o *InstanceTypeQueryOutput) UnsetCpu() {
	o.Cpu.Unset()
}

// GetAccelerator returns the Accelerator field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InstanceTypeQueryOutput) GetAccelerator() AcceleratorQueryOutput {
	if o == nil || IsNil(o.Accelerator.Get()) {
		var ret AcceleratorQueryOutput
		return ret
	}
	return *o.Accelerator.Get()
}

// GetAcceleratorOk returns a tuple with the Accelerator field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InstanceTypeQueryOutput) GetAcceleratorOk() (*AcceleratorQueryOutput, bool) {
	if o == nil {
		return nil, false
	}
	return o.Accelerator.Get(), o.Accelerator.IsSet()
}

// HasAccelerator returns a boolean if a field has been set.
func (o *InstanceTypeQueryOutput) HasAccelerator() bool {
	if o != nil && o.Accelerator.IsSet() {
		return true
	}

	return false
}

// SetAccelerator gets a reference to the given NullableAcceleratorQueryOutput and assigns it to the Accelerator field.
func (o *InstanceTypeQueryOutput) SetAccelerator(v AcceleratorQueryOutput) {
	o.Accelerator.Set(&v)
}
// SetAcceleratorNil sets the value for Accelerator to be an explicit nil
func (o *InstanceTypeQueryOutput) SetAcceleratorNil() {
	o.Accelerator.Set(nil)
}

// UnsetAccelerator ensures that no value is present for Accelerator, not even an explicit nil
func (o *InstanceTypeQueryOutput) UnsetAccelerator() {
	o.Accelerator.Unset()
}

// GetRam returns the Ram field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InstanceTypeQueryOutput) GetRam() MemoryQueryOutput {
	if o == nil || IsNil(o.Ram.Get()) {
		var ret MemoryQueryOutput
		return ret
	}
	return *o.Ram.Get()
}

// GetRamOk returns a tuple with the Ram field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InstanceTypeQueryOutput) GetRamOk() (*MemoryQueryOutput, bool) {
	if o == nil {
		return nil, false
	}
	return o.Ram.Get(), o.Ram.IsSet()
}

// HasRam returns a boolean if a field has been set.
func (o *InstanceTypeQueryOutput) HasRam() bool {
	if o != nil && o.Ram.IsSet() {
		return true
	}

	return false
}

// SetRam gets a reference to the given NullableMemoryQueryOutput and assigns it to the Ram field.
func (o *InstanceTypeQueryOutput) SetRam(v MemoryQueryOutput) {
	o.Ram.Set(&v)
}
// SetRamNil sets the value for Ram to be an explicit nil
func (o *InstanceTypeQueryOutput) SetRamNil() {
	o.Ram.Set(nil)
}

// UnsetRam ensures that no value is present for Ram, not even an explicit nil
func (o *InstanceTypeQueryOutput) UnsetRam() {
	o.Ram.Unset()
}

// GetStorage returns the Storage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InstanceTypeQueryOutput) GetStorage() StorageQueryOutput {
	if o == nil || IsNil(o.Storage.Get()) {
		var ret StorageQueryOutput
		return ret
	}
	return *o.Storage.Get()
}

// GetStorageOk returns a tuple with the Storage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InstanceTypeQueryOutput) GetStorageOk() (*StorageQueryOutput, bool) {
	if o == nil {
		return nil, false
	}
	return o.Storage.Get(), o.Storage.IsSet()
}

// HasStorage returns a boolean if a field has been set.
func (o *InstanceTypeQueryOutput) HasStorage() bool {
	if o != nil && o.Storage.IsSet() {
		return true
	}

	return false
}

// SetStorage gets a reference to the given NullableStorageQueryOutput and assigns it to the Storage field.
func (o *InstanceTypeQueryOutput) SetStorage(v StorageQueryOutput) {
	o.Storage.Set(&v)
}
// SetStorageNil sets the value for Storage to be an explicit nil
func (o *InstanceTypeQueryOutput) SetStorageNil() {
	o.Storage.Set(nil)
}

// UnsetStorage ensures that no value is present for Storage, not even an explicit nil
func (o *InstanceTypeQueryOutput) UnsetStorage() {
	o.Storage.Unset()
}

// GetNetwork returns the Network field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InstanceTypeQueryOutput) GetNetwork() NetworkQueryOutput {
	if o == nil || IsNil(o.Network.Get()) {
		var ret NetworkQueryOutput
		return ret
	}
	return *o.Network.Get()
}

// GetNetworkOk returns a tuple with the Network field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InstanceTypeQueryOutput) GetNetworkOk() (*NetworkQueryOutput, bool) {
	if o == nil {
		return nil, false
	}
	return o.Network.Get(), o.Network.IsSet()
}

// HasNetwork returns a boolean if a field has been set.
func (o *InstanceTypeQueryOutput) HasNetwork() bool {
	if o != nil && o.Network.IsSet() {
		return true
	}

	return false
}

// SetNetwork gets a reference to the given NullableNetworkQueryOutput and assigns it to the Network field.
func (o *InstanceTypeQueryOutput) SetNetwork(v NetworkQueryOutput) {
	o.Network.Set(&v)
}
// SetNetworkNil sets the value for Network to be an explicit nil
func (o *InstanceTypeQueryOutput) SetNetworkNil() {
	o.Network.Set(nil)
}

// UnsetNetwork ensures that no value is present for Network, not even an explicit nil
func (o *InstanceTypeQueryOutput) UnsetNetwork() {
	o.Network.Unset()
}

// GetPrice returns the Price field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InstanceTypeQueryOutput) GetPrice() PriceQueryOutput {
	if o == nil || IsNil(o.Price.Get()) {
		var ret PriceQueryOutput
		return ret
	}
	return *o.Price.Get()
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InstanceTypeQueryOutput) GetPriceOk() (*PriceQueryOutput, bool) {
	if o == nil {
		return nil, false
	}
	return o.Price.Get(), o.Price.IsSet()
}

// HasPrice returns a boolean if a field has been set.
func (o *InstanceTypeQueryOutput) HasPrice() bool {
	if o != nil && o.Price.IsSet() {
		return true
	}

	return false
}

// SetPrice gets a reference to the given NullablePriceQueryOutput and assigns it to the Price field.
func (o *InstanceTypeQueryOutput) SetPrice(v PriceQueryOutput) {
	o.Price.Set(&v)
}
// SetPriceNil sets the value for Price to be an explicit nil
func (o *InstanceTypeQueryOutput) SetPriceNil() {
	o.Price.Set(nil)
}

// UnsetPrice ensures that no value is present for Price, not even an explicit nil
func (o *InstanceTypeQueryOutput) UnsetPrice() {
	o.Price.Unset()
}

// GetAvailability returns the Availability field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InstanceTypeQueryOutput) GetAvailability() AvailabilityQueryOutput {
	if o == nil || IsNil(o.Availability.Get()) {
		var ret AvailabilityQueryOutput
		return ret
	}
	return *o.Availability.Get()
}

// GetAvailabilityOk returns a tuple with the Availability field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InstanceTypeQueryOutput) GetAvailabilityOk() (*AvailabilityQueryOutput, bool) {
	if o == nil {
		return nil, false
	}
	return o.Availability.Get(), o.Availability.IsSet()
}

// HasAvailability returns a boolean if a field has been set.
func (o *InstanceTypeQueryOutput) HasAvailability() bool {
	if o != nil && o.Availability.IsSet() {
		return true
	}

	return false
}

// SetAvailability gets a reference to the given NullableAvailabilityQueryOutput and assigns it to the Availability field.
func (o *InstanceTypeQueryOutput) SetAvailability(v AvailabilityQueryOutput) {
	o.Availability.Set(&v)
}
// SetAvailabilityNil sets the value for Availability to be an explicit nil
func (o *InstanceTypeQueryOutput) SetAvailabilityNil() {
	o.Availability.Set(nil)
}

// UnsetAvailability ensures that no value is present for Availability, not even an explicit nil
func (o *InstanceTypeQueryOutput) UnsetAvailability() {
	o.Availability.Unset()
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InstanceTypeQueryOutput) GetType() string {
	if o == nil || IsNil(o.Type.Get()) {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InstanceTypeQueryOutput) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *InstanceTypeQueryOutput) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *InstanceTypeQueryOutput) SetType(v string) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *InstanceTypeQueryOutput) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *InstanceTypeQueryOutput) UnsetType() {
	o.Type.Unset()
}

// GetBillingGranularity returns the BillingGranularity field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InstanceTypeQueryOutput) GetBillingGranularity() string {
	if o == nil || IsNil(o.BillingGranularity.Get()) {
		var ret string
		return ret
	}
	return *o.BillingGranularity.Get()
}

// GetBillingGranularityOk returns a tuple with the BillingGranularity field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InstanceTypeQueryOutput) GetBillingGranularityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BillingGranularity.Get(), o.BillingGranularity.IsSet()
}

// HasBillingGranularity returns a boolean if a field has been set.
func (o *InstanceTypeQueryOutput) HasBillingGranularity() bool {
	if o != nil && o.BillingGranularity.IsSet() {
		return true
	}

	return false
}

// SetBillingGranularity gets a reference to the given NullableString and assigns it to the BillingGranularity field.
func (o *InstanceTypeQueryOutput) SetBillingGranularity(v string) {
	o.BillingGranularity.Set(&v)
}
// SetBillingGranularityNil sets the value for BillingGranularity to be an explicit nil
func (o *InstanceTypeQueryOutput) SetBillingGranularityNil() {
	o.BillingGranularity.Set(nil)
}

// UnsetBillingGranularity ensures that no value is present for BillingGranularity, not even an explicit nil
func (o *InstanceTypeQueryOutput) UnsetBillingGranularity() {
	o.BillingGranularity.Unset()
}

// GetProvider returns the Provider field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InstanceTypeQueryOutput) GetProvider() ProviderQueryOutput {
	if o == nil || IsNil(o.Provider.Get()) {
		var ret ProviderQueryOutput
		return ret
	}
	return *o.Provider.Get()
}

// GetProviderOk returns a tuple with the Provider field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InstanceTypeQueryOutput) GetProviderOk() (*ProviderQueryOutput, bool) {
	if o == nil {
		return nil, false
	}
	return o.Provider.Get(), o.Provider.IsSet()
}

// HasProvider returns a boolean if a field has been set.
func (o *InstanceTypeQueryOutput) HasProvider() bool {
	if o != nil && o.Provider.IsSet() {
		return true
	}

	return false
}

// SetProvider gets a reference to the given NullableProviderQueryOutput and assigns it to the Provider field.
func (o *InstanceTypeQueryOutput) SetProvider(v ProviderQueryOutput) {
	o.Provider.Set(&v)
}
// SetProviderNil sets the value for Provider to be an explicit nil
func (o *InstanceTypeQueryOutput) SetProviderNil() {
	o.Provider.Set(nil)
}

// UnsetProvider ensures that no value is present for Provider, not even an explicit nil
func (o *InstanceTypeQueryOutput) UnsetProvider() {
	o.Provider.Unset()
}

// GetReferenceId returns the ReferenceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InstanceTypeQueryOutput) GetReferenceId() ReferenceIdQueryOutput {
	if o == nil || IsNil(o.ReferenceId.Get()) {
		var ret ReferenceIdQueryOutput
		return ret
	}
	return *o.ReferenceId.Get()
}

// GetReferenceIdOk returns a tuple with the ReferenceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InstanceTypeQueryOutput) GetReferenceIdOk() (*ReferenceIdQueryOutput, bool) {
	if o == nil {
		return nil, false
	}
	return o.ReferenceId.Get(), o.ReferenceId.IsSet()
}

// HasReferenceId returns a boolean if a field has been set.
func (o *InstanceTypeQueryOutput) HasReferenceId() bool {
	if o != nil && o.ReferenceId.IsSet() {
		return true
	}

	return false
}

// SetReferenceId gets a reference to the given NullableReferenceIdQueryOutput and assigns it to the ReferenceId field.
func (o *InstanceTypeQueryOutput) SetReferenceId(v ReferenceIdQueryOutput) {
	o.ReferenceId.Set(&v)
}
// SetReferenceIdNil sets the value for ReferenceId to be an explicit nil
func (o *InstanceTypeQueryOutput) SetReferenceIdNil() {
	o.ReferenceId.Set(nil)
}

// UnsetReferenceId ensures that no value is present for ReferenceId, not even an explicit nil
func (o *InstanceTypeQueryOutput) UnsetReferenceId() {
	o.ReferenceId.Unset()
}

// GetAttributesHash returns the AttributesHash field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InstanceTypeQueryOutput) GetAttributesHash() AttributesHash {
	if o == nil || IsNil(o.AttributesHash.Get()) {
		var ret AttributesHash
		return ret
	}
	return *o.AttributesHash.Get()
}

// GetAttributesHashOk returns a tuple with the AttributesHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InstanceTypeQueryOutput) GetAttributesHashOk() (*AttributesHash, bool) {
	if o == nil {
		return nil, false
	}
	return o.AttributesHash.Get(), o.AttributesHash.IsSet()
}

// HasAttributesHash returns a boolean if a field has been set.
func (o *InstanceTypeQueryOutput) HasAttributesHash() bool {
	if o != nil && o.AttributesHash.IsSet() {
		return true
	}

	return false
}

// SetAttributesHash gets a reference to the given NullableAttributesHash and assigns it to the AttributesHash field.
func (o *InstanceTypeQueryOutput) SetAttributesHash(v AttributesHash) {
	o.AttributesHash.Set(&v)
}
// SetAttributesHashNil sets the value for AttributesHash to be an explicit nil
func (o *InstanceTypeQueryOutput) SetAttributesHashNil() {
	o.AttributesHash.Set(nil)
}

// UnsetAttributesHash ensures that no value is present for AttributesHash, not even an explicit nil
func (o *InstanceTypeQueryOutput) UnsetAttributesHash() {
	o.AttributesHash.Unset()
}

func (o InstanceTypeQueryOutput) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InstanceTypeQueryOutput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Operator.IsSet() {
		toSerialize["operator"] = o.Operator.Get()
	}
	if o.Options.IsSet() {
		toSerialize["options"] = o.Options.Get()
	}
	if !IsNil(o.All) {
		toSerialize["all"] = o.All
	}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.Region.IsSet() {
		toSerialize["region"] = o.Region.Get()
	}
	if o.Zone.IsSet() {
		toSerialize["zone"] = o.Zone.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Cpu.IsSet() {
		toSerialize["cpu"] = o.Cpu.Get()
	}
	if o.Accelerator.IsSet() {
		toSerialize["accelerator"] = o.Accelerator.Get()
	}
	if o.Ram.IsSet() {
		toSerialize["ram"] = o.Ram.Get()
	}
	if o.Storage.IsSet() {
		toSerialize["storage"] = o.Storage.Get()
	}
	if o.Network.IsSet() {
		toSerialize["network"] = o.Network.Get()
	}
	if o.Price.IsSet() {
		toSerialize["price"] = o.Price.Get()
	}
	if o.Availability.IsSet() {
		toSerialize["availability"] = o.Availability.Get()
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	if o.BillingGranularity.IsSet() {
		toSerialize["billing_granularity"] = o.BillingGranularity.Get()
	}
	if o.Provider.IsSet() {
		toSerialize["provider"] = o.Provider.Get()
	}
	if o.ReferenceId.IsSet() {
		toSerialize["reference_id"] = o.ReferenceId.Get()
	}
	if o.AttributesHash.IsSet() {
		toSerialize["attributes_hash"] = o.AttributesHash.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *InstanceTypeQueryOutput) UnmarshalJSON(data []byte) (err error) {
	varInstanceTypeQueryOutput := _InstanceTypeQueryOutput{}

	err = json.Unmarshal(data, &varInstanceTypeQueryOutput)

	if err != nil {
		return err
	}

	*o = InstanceTypeQueryOutput(varInstanceTypeQueryOutput)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "operator")
		delete(additionalProperties, "options")
		delete(additionalProperties, "all")
		delete(additionalProperties, "id")
		delete(additionalProperties, "region")
		delete(additionalProperties, "zone")
		delete(additionalProperties, "name")
		delete(additionalProperties, "cpu")
		delete(additionalProperties, "accelerator")
		delete(additionalProperties, "ram")
		delete(additionalProperties, "storage")
		delete(additionalProperties, "network")
		delete(additionalProperties, "price")
		delete(additionalProperties, "availability")
		delete(additionalProperties, "type")
		delete(additionalProperties, "billing_granularity")
		delete(additionalProperties, "provider")
		delete(additionalProperties, "reference_id")
		delete(additionalProperties, "attributes_hash")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInstanceTypeQueryOutput struct {
	value *InstanceTypeQueryOutput
	isSet bool
}

func (v NullableInstanceTypeQueryOutput) Get() *InstanceTypeQueryOutput {
	return v.value
}

func (v *NullableInstanceTypeQueryOutput) Set(val *InstanceTypeQueryOutput) {
	v.value = val
	v.isSet = true
}

func (v NullableInstanceTypeQueryOutput) IsSet() bool {
	return v.isSet
}

func (v *NullableInstanceTypeQueryOutput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstanceTypeQueryOutput(val *InstanceTypeQueryOutput) *NullableInstanceTypeQueryOutput {
	return &NullableInstanceTypeQueryOutput{value: val, isSet: true}
}

func (v NullableInstanceTypeQueryOutput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstanceTypeQueryOutput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


