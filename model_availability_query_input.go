/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.2.8
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package perian

import (
	"encoding/json"
)

// checks if the AvailabilityQueryInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AvailabilityQueryInput{}

// AvailabilityQueryInput Query for the availability attribute.
type AvailabilityQueryInput struct {
	Operator NullableOperator `json:"operator,omitempty"`
	Options NullableQueryOptions `json:"options,omitempty"`
	All *bool `json:"all,omitempty"`
	Available NullableBool `json:"available,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AvailabilityQueryInput AvailabilityQueryInput

// NewAvailabilityQueryInput instantiates a new AvailabilityQueryInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAvailabilityQueryInput() *AvailabilityQueryInput {
	this := AvailabilityQueryInput{}
	var all bool = false
	this.All = &all
	return &this
}

// NewAvailabilityQueryInputWithDefaults instantiates a new AvailabilityQueryInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAvailabilityQueryInputWithDefaults() *AvailabilityQueryInput {
	this := AvailabilityQueryInput{}
	var all bool = false
	this.All = &all
	return &this
}

// GetOperator returns the Operator field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AvailabilityQueryInput) GetOperator() Operator {
	if o == nil || IsNil(o.Operator.Get()) {
		var ret Operator
		return ret
	}
	return *o.Operator.Get()
}

// GetOperatorOk returns a tuple with the Operator field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AvailabilityQueryInput) GetOperatorOk() (*Operator, bool) {
	if o == nil {
		return nil, false
	}
	return o.Operator.Get(), o.Operator.IsSet()
}

// HasOperator returns a boolean if a field has been set.
func (o *AvailabilityQueryInput) HasOperator() bool {
	if o != nil && o.Operator.IsSet() {
		return true
	}

	return false
}

// SetOperator gets a reference to the given NullableOperator and assigns it to the Operator field.
func (o *AvailabilityQueryInput) SetOperator(v Operator) {
	o.Operator.Set(&v)
}
// SetOperatorNil sets the value for Operator to be an explicit nil
func (o *AvailabilityQueryInput) SetOperatorNil() {
	o.Operator.Set(nil)
}

// UnsetOperator ensures that no value is present for Operator, not even an explicit nil
func (o *AvailabilityQueryInput) UnsetOperator() {
	o.Operator.Unset()
}

// GetOptions returns the Options field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AvailabilityQueryInput) GetOptions() QueryOptions {
	if o == nil || IsNil(o.Options.Get()) {
		var ret QueryOptions
		return ret
	}
	return *o.Options.Get()
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AvailabilityQueryInput) GetOptionsOk() (*QueryOptions, bool) {
	if o == nil {
		return nil, false
	}
	return o.Options.Get(), o.Options.IsSet()
}

// HasOptions returns a boolean if a field has been set.
func (o *AvailabilityQueryInput) HasOptions() bool {
	if o != nil && o.Options.IsSet() {
		return true
	}

	return false
}

// SetOptions gets a reference to the given NullableQueryOptions and assigns it to the Options field.
func (o *AvailabilityQueryInput) SetOptions(v QueryOptions) {
	o.Options.Set(&v)
}
// SetOptionsNil sets the value for Options to be an explicit nil
func (o *AvailabilityQueryInput) SetOptionsNil() {
	o.Options.Set(nil)
}

// UnsetOptions ensures that no value is present for Options, not even an explicit nil
func (o *AvailabilityQueryInput) UnsetOptions() {
	o.Options.Unset()
}

// GetAll returns the All field value if set, zero value otherwise.
func (o *AvailabilityQueryInput) GetAll() bool {
	if o == nil || IsNil(o.All) {
		var ret bool
		return ret
	}
	return *o.All
}

// GetAllOk returns a tuple with the All field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AvailabilityQueryInput) GetAllOk() (*bool, bool) {
	if o == nil || IsNil(o.All) {
		return nil, false
	}
	return o.All, true
}

// HasAll returns a boolean if a field has been set.
func (o *AvailabilityQueryInput) HasAll() bool {
	if o != nil && !IsNil(o.All) {
		return true
	}

	return false
}

// SetAll gets a reference to the given bool and assigns it to the All field.
func (o *AvailabilityQueryInput) SetAll(v bool) {
	o.All = &v
}

// GetAvailable returns the Available field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AvailabilityQueryInput) GetAvailable() bool {
	if o == nil || IsNil(o.Available.Get()) {
		var ret bool
		return ret
	}
	return *o.Available.Get()
}

// GetAvailableOk returns a tuple with the Available field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AvailabilityQueryInput) GetAvailableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Available.Get(), o.Available.IsSet()
}

// HasAvailable returns a boolean if a field has been set.
func (o *AvailabilityQueryInput) HasAvailable() bool {
	if o != nil && o.Available.IsSet() {
		return true
	}

	return false
}

// SetAvailable gets a reference to the given NullableBool and assigns it to the Available field.
func (o *AvailabilityQueryInput) SetAvailable(v bool) {
	o.Available.Set(&v)
}
// SetAvailableNil sets the value for Available to be an explicit nil
func (o *AvailabilityQueryInput) SetAvailableNil() {
	o.Available.Set(nil)
}

// UnsetAvailable ensures that no value is present for Available, not even an explicit nil
func (o *AvailabilityQueryInput) UnsetAvailable() {
	o.Available.Unset()
}

func (o AvailabilityQueryInput) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AvailabilityQueryInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Operator.IsSet() {
		toSerialize["operator"] = o.Operator.Get()
	}
	if o.Options.IsSet() {
		toSerialize["options"] = o.Options.Get()
	}
	if !IsNil(o.All) {
		toSerialize["all"] = o.All
	}
	if o.Available.IsSet() {
		toSerialize["available"] = o.Available.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AvailabilityQueryInput) UnmarshalJSON(data []byte) (err error) {
	varAvailabilityQueryInput := _AvailabilityQueryInput{}

	err = json.Unmarshal(data, &varAvailabilityQueryInput)

	if err != nil {
		return err
	}

	*o = AvailabilityQueryInput(varAvailabilityQueryInput)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "operator")
		delete(additionalProperties, "options")
		delete(additionalProperties, "all")
		delete(additionalProperties, "available")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAvailabilityQueryInput struct {
	value *AvailabilityQueryInput
	isSet bool
}

func (v NullableAvailabilityQueryInput) Get() *AvailabilityQueryInput {
	return v.value
}

func (v *NullableAvailabilityQueryInput) Set(val *AvailabilityQueryInput) {
	v.value = val
	v.isSet = true
}

func (v NullableAvailabilityQueryInput) IsSet() bool {
	return v.isSet
}

func (v *NullableAvailabilityQueryInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAvailabilityQueryInput(val *AvailabilityQueryInput) *NullableAvailabilityQueryInput {
	return &NullableAvailabilityQueryInput{value: val, isSet: true}
}

func (v NullableAvailabilityQueryInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAvailabilityQueryInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


