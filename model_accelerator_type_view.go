/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.2.8
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package perian

import (
	"encoding/json"
)

// checks if the AcceleratorTypeView type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AcceleratorTypeView{}

// AcceleratorTypeView struct for AcceleratorTypeView
type AcceleratorTypeView struct {
	Name *AcceleratorName `json:"name,omitempty"`
	DisplayName *string `json:"display_name,omitempty"`
	Id *string `json:"id,omitempty"`
	Vendor *AcceleratorVendor `json:"vendor,omitempty"`
	Memory *Memory `json:"memory,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AcceleratorTypeView AcceleratorTypeView

// NewAcceleratorTypeView instantiates a new AcceleratorTypeView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAcceleratorTypeView() *AcceleratorTypeView {
	this := AcceleratorTypeView{}
	var vendor AcceleratorVendor = ACCELERATORVENDOR_UNDEFINED
	this.Vendor = &vendor
	var memory Memory = *NewMemory()
	this.Memory = &memory
	return &this
}

// NewAcceleratorTypeViewWithDefaults instantiates a new AcceleratorTypeView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAcceleratorTypeViewWithDefaults() *AcceleratorTypeView {
	this := AcceleratorTypeView{}
	var vendor AcceleratorVendor = ACCELERATORVENDOR_UNDEFINED
	this.Vendor = &vendor
	var memory Memory = *NewMemory()
	this.Memory = &memory
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AcceleratorTypeView) GetName() AcceleratorName {
	if o == nil || IsNil(o.Name) {
		var ret AcceleratorName
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AcceleratorTypeView) GetNameOk() (*AcceleratorName, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AcceleratorTypeView) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given AcceleratorName and assigns it to the Name field.
func (o *AcceleratorTypeView) SetName(v AcceleratorName) {
	o.Name = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *AcceleratorTypeView) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AcceleratorTypeView) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *AcceleratorTypeView) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *AcceleratorTypeView) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AcceleratorTypeView) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AcceleratorTypeView) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AcceleratorTypeView) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *AcceleratorTypeView) SetId(v string) {
	o.Id = &v
}

// GetVendor returns the Vendor field value if set, zero value otherwise.
func (o *AcceleratorTypeView) GetVendor() AcceleratorVendor {
	if o == nil || IsNil(o.Vendor) {
		var ret AcceleratorVendor
		return ret
	}
	return *o.Vendor
}

// GetVendorOk returns a tuple with the Vendor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AcceleratorTypeView) GetVendorOk() (*AcceleratorVendor, bool) {
	if o == nil || IsNil(o.Vendor) {
		return nil, false
	}
	return o.Vendor, true
}

// HasVendor returns a boolean if a field has been set.
func (o *AcceleratorTypeView) HasVendor() bool {
	if o != nil && !IsNil(o.Vendor) {
		return true
	}

	return false
}

// SetVendor gets a reference to the given AcceleratorVendor and assigns it to the Vendor field.
func (o *AcceleratorTypeView) SetVendor(v AcceleratorVendor) {
	o.Vendor = &v
}

// GetMemory returns the Memory field value if set, zero value otherwise.
func (o *AcceleratorTypeView) GetMemory() Memory {
	if o == nil || IsNil(o.Memory) {
		var ret Memory
		return ret
	}
	return *o.Memory
}

// GetMemoryOk returns a tuple with the Memory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AcceleratorTypeView) GetMemoryOk() (*Memory, bool) {
	if o == nil || IsNil(o.Memory) {
		return nil, false
	}
	return o.Memory, true
}

// HasMemory returns a boolean if a field has been set.
func (o *AcceleratorTypeView) HasMemory() bool {
	if o != nil && !IsNil(o.Memory) {
		return true
	}

	return false
}

// SetMemory gets a reference to the given Memory and assigns it to the Memory field.
func (o *AcceleratorTypeView) SetMemory(v Memory) {
	o.Memory = &v
}

func (o AcceleratorTypeView) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AcceleratorTypeView) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.DisplayName) {
		toSerialize["display_name"] = o.DisplayName
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Vendor) {
		toSerialize["vendor"] = o.Vendor
	}
	if !IsNil(o.Memory) {
		toSerialize["memory"] = o.Memory
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AcceleratorTypeView) UnmarshalJSON(data []byte) (err error) {
	varAcceleratorTypeView := _AcceleratorTypeView{}

	err = json.Unmarshal(data, &varAcceleratorTypeView)

	if err != nil {
		return err
	}

	*o = AcceleratorTypeView(varAcceleratorTypeView)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "display_name")
		delete(additionalProperties, "id")
		delete(additionalProperties, "vendor")
		delete(additionalProperties, "memory")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAcceleratorTypeView struct {
	value *AcceleratorTypeView
	isSet bool
}

func (v NullableAcceleratorTypeView) Get() *AcceleratorTypeView {
	return v.value
}

func (v *NullableAcceleratorTypeView) Set(val *AcceleratorTypeView) {
	v.value = val
	v.isSet = true
}

func (v NullableAcceleratorTypeView) IsSet() bool {
	return v.isSet
}

func (v *NullableAcceleratorTypeView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAcceleratorTypeView(val *AcceleratorTypeView) *NullableAcceleratorTypeView {
	return &NullableAcceleratorTypeView{value: val, isSet: true}
}

func (v NullableAcceleratorTypeView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAcceleratorTypeView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


