/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.2.8
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package perian

import (
	"encoding/json"
	"fmt"
)

// MemoryUnit Enum class representing memory units.
type MemoryUnit string

// List of MemoryUnit
const (
	MEMORYUNIT_GB MemoryUnit = "Gb"
	MEMORYUNIT_MB MemoryUnit = "Mb"
	MEMORYUNIT_KB MemoryUnit = "Kb"
)

// All allowed values of MemoryUnit enum
var AllowedMemoryUnitEnumValues = []MemoryUnit{
	"Gb",
	"Mb",
	"Kb",
}

func (v *MemoryUnit) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MemoryUnit(value)
	for _, existing := range AllowedMemoryUnitEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MemoryUnit", value)
}

// NewMemoryUnitFromValue returns a pointer to a valid MemoryUnit
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMemoryUnitFromValue(v string) (*MemoryUnit, error) {
	ev := MemoryUnit(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MemoryUnit: valid values are %v", v, AllowedMemoryUnitEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MemoryUnit) IsValid() bool {
	for _, existing := range AllowedMemoryUnitEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MemoryUnit value
func (v MemoryUnit) Ptr() *MemoryUnit {
	return &v
}

type NullableMemoryUnit struct {
	value *MemoryUnit
	isSet bool
}

func (v NullableMemoryUnit) Get() *MemoryUnit {
	return v.value
}

func (v *NullableMemoryUnit) Set(val *MemoryUnit) {
	v.value = val
	v.isSet = true
}

func (v NullableMemoryUnit) IsSet() bool {
	return v.isSet
}

func (v *NullableMemoryUnit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMemoryUnit(val *MemoryUnit) *NullableMemoryUnit {
	return &NullableMemoryUnit{value: val, isSet: true}
}

func (v NullableMemoryUnit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMemoryUnit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

