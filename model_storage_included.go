/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.2.8
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package perian

import (
	"encoding/json"
	"fmt"
)

// StorageIncluded the model 'StorageIncluded'
type StorageIncluded string

// List of StorageIncluded
const (
	UNDEFINED StorageIncluded = "UNDEFINED"
	INCLUDED StorageIncluded = "INCLUDED"
	NOT_INCLUDED StorageIncluded = "NOT_INCLUDED"
)

// All allowed values of StorageIncluded enum
var AllowedStorageIncludedEnumValues = []StorageIncluded{
	"UNDEFINED",
	"INCLUDED",
	"NOT_INCLUDED",
}

func (v *StorageIncluded) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := StorageIncluded(value)
	for _, existing := range AllowedStorageIncludedEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid StorageIncluded", value)
}

// NewStorageIncludedFromValue returns a pointer to a valid StorageIncluded
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStorageIncludedFromValue(v string) (*StorageIncluded, error) {
	ev := StorageIncluded(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for StorageIncluded: valid values are %v", v, AllowedStorageIncludedEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StorageIncluded) IsValid() bool {
	for _, existing := range AllowedStorageIncludedEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to StorageIncluded value
func (v StorageIncluded) Ptr() *StorageIncluded {
	return &v
}

type NullableStorageIncluded struct {
	value *StorageIncluded
	isSet bool
}

func (v NullableStorageIncluded) Get() *StorageIncluded {
	return v.value
}

func (v *NullableStorageIncluded) Set(val *StorageIncluded) {
	v.value = val
	v.isSet = true
}

func (v NullableStorageIncluded) IsSet() bool {
	return v.isSet
}

func (v *NullableStorageIncluded) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStorageIncluded(val *StorageIncluded) *NullableStorageIncluded {
	return &NullableStorageIncluded{value: val, isSet: true}
}

func (v NullableStorageIncluded) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStorageIncluded) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

