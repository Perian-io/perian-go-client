/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.2.8
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package perian

import (
	"encoding/json"
	"fmt"
)

// ProviderCapabilities Enum class representing the capabilities of a provider.
type ProviderCapabilities string

// List of ProviderCapabilities
const (
	PRICING_API ProviderCapabilities = "PricingAPI"
	JOB_API ProviderCapabilities = "JobAPI"
)

// All allowed values of ProviderCapabilities enum
var AllowedProviderCapabilitiesEnumValues = []ProviderCapabilities{
	"PricingAPI",
	"JobAPI",
}

func (v *ProviderCapabilities) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ProviderCapabilities(value)
	for _, existing := range AllowedProviderCapabilitiesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ProviderCapabilities", value)
}

// NewProviderCapabilitiesFromValue returns a pointer to a valid ProviderCapabilities
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewProviderCapabilitiesFromValue(v string) (*ProviderCapabilities, error) {
	ev := ProviderCapabilities(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ProviderCapabilities: valid values are %v", v, AllowedProviderCapabilitiesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ProviderCapabilities) IsValid() bool {
	for _, existing := range AllowedProviderCapabilitiesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ProviderCapabilities value
func (v ProviderCapabilities) Ptr() *ProviderCapabilities {
	return &v
}

type NullableProviderCapabilities struct {
	value *ProviderCapabilities
	isSet bool
}

func (v NullableProviderCapabilities) Get() *ProviderCapabilities {
	return v.value
}

func (v *NullableProviderCapabilities) Set(val *ProviderCapabilities) {
	v.value = val
	v.isSet = true
}

func (v NullableProviderCapabilities) IsSet() bool {
	return v.isSet
}

func (v *NullableProviderCapabilities) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProviderCapabilities(val *ProviderCapabilities) *NullableProviderCapabilities {
	return &NullableProviderCapabilities{value: val, isSet: true}
}

func (v NullableProviderCapabilities) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProviderCapabilities) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

