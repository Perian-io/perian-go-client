/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.2.8
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package perian

import (
	"encoding/json"
)

// checks if the ReferenceIdQueryInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReferenceIdQueryInput{}

// ReferenceIdQueryInput Query for the reference id attribute.
type ReferenceIdQueryInput struct {
	Operator NullableOperator `json:"operator,omitempty"`
	Options NullableQueryOptions `json:"options,omitempty"`
	All *bool `json:"all,omitempty"`
	Id NullableString `json:"id,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ReferenceIdQueryInput ReferenceIdQueryInput

// NewReferenceIdQueryInput instantiates a new ReferenceIdQueryInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReferenceIdQueryInput() *ReferenceIdQueryInput {
	this := ReferenceIdQueryInput{}
	var all bool = false
	this.All = &all
	return &this
}

// NewReferenceIdQueryInputWithDefaults instantiates a new ReferenceIdQueryInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReferenceIdQueryInputWithDefaults() *ReferenceIdQueryInput {
	this := ReferenceIdQueryInput{}
	var all bool = false
	this.All = &all
	return &this
}

// GetOperator returns the Operator field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReferenceIdQueryInput) GetOperator() Operator {
	if o == nil || IsNil(o.Operator.Get()) {
		var ret Operator
		return ret
	}
	return *o.Operator.Get()
}

// GetOperatorOk returns a tuple with the Operator field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReferenceIdQueryInput) GetOperatorOk() (*Operator, bool) {
	if o == nil {
		return nil, false
	}
	return o.Operator.Get(), o.Operator.IsSet()
}

// HasOperator returns a boolean if a field has been set.
func (o *ReferenceIdQueryInput) HasOperator() bool {
	if o != nil && o.Operator.IsSet() {
		return true
	}

	return false
}

// SetOperator gets a reference to the given NullableOperator and assigns it to the Operator field.
func (o *ReferenceIdQueryInput) SetOperator(v Operator) {
	o.Operator.Set(&v)
}
// SetOperatorNil sets the value for Operator to be an explicit nil
func (o *ReferenceIdQueryInput) SetOperatorNil() {
	o.Operator.Set(nil)
}

// UnsetOperator ensures that no value is present for Operator, not even an explicit nil
func (o *ReferenceIdQueryInput) UnsetOperator() {
	o.Operator.Unset()
}

// GetOptions returns the Options field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReferenceIdQueryInput) GetOptions() QueryOptions {
	if o == nil || IsNil(o.Options.Get()) {
		var ret QueryOptions
		return ret
	}
	return *o.Options.Get()
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReferenceIdQueryInput) GetOptionsOk() (*QueryOptions, bool) {
	if o == nil {
		return nil, false
	}
	return o.Options.Get(), o.Options.IsSet()
}

// HasOptions returns a boolean if a field has been set.
func (o *ReferenceIdQueryInput) HasOptions() bool {
	if o != nil && o.Options.IsSet() {
		return true
	}

	return false
}

// SetOptions gets a reference to the given NullableQueryOptions and assigns it to the Options field.
func (o *ReferenceIdQueryInput) SetOptions(v QueryOptions) {
	o.Options.Set(&v)
}
// SetOptionsNil sets the value for Options to be an explicit nil
func (o *ReferenceIdQueryInput) SetOptionsNil() {
	o.Options.Set(nil)
}

// UnsetOptions ensures that no value is present for Options, not even an explicit nil
func (o *ReferenceIdQueryInput) UnsetOptions() {
	o.Options.Unset()
}

// GetAll returns the All field value if set, zero value otherwise.
func (o *ReferenceIdQueryInput) GetAll() bool {
	if o == nil || IsNil(o.All) {
		var ret bool
		return ret
	}
	return *o.All
}

// GetAllOk returns a tuple with the All field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReferenceIdQueryInput) GetAllOk() (*bool, bool) {
	if o == nil || IsNil(o.All) {
		return nil, false
	}
	return o.All, true
}

// HasAll returns a boolean if a field has been set.
func (o *ReferenceIdQueryInput) HasAll() bool {
	if o != nil && !IsNil(o.All) {
		return true
	}

	return false
}

// SetAll gets a reference to the given bool and assigns it to the All field.
func (o *ReferenceIdQueryInput) SetAll(v bool) {
	o.All = &v
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReferenceIdQueryInput) GetId() string {
	if o == nil || IsNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReferenceIdQueryInput) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *ReferenceIdQueryInput) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *ReferenceIdQueryInput) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *ReferenceIdQueryInput) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *ReferenceIdQueryInput) UnsetId() {
	o.Id.Unset()
}

func (o ReferenceIdQueryInput) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReferenceIdQueryInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Operator.IsSet() {
		toSerialize["operator"] = o.Operator.Get()
	}
	if o.Options.IsSet() {
		toSerialize["options"] = o.Options.Get()
	}
	if !IsNil(o.All) {
		toSerialize["all"] = o.All
	}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ReferenceIdQueryInput) UnmarshalJSON(data []byte) (err error) {
	varReferenceIdQueryInput := _ReferenceIdQueryInput{}

	err = json.Unmarshal(data, &varReferenceIdQueryInput)

	if err != nil {
		return err
	}

	*o = ReferenceIdQueryInput(varReferenceIdQueryInput)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "operator")
		delete(additionalProperties, "options")
		delete(additionalProperties, "all")
		delete(additionalProperties, "id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableReferenceIdQueryInput struct {
	value *ReferenceIdQueryInput
	isSet bool
}

func (v NullableReferenceIdQueryInput) Get() *ReferenceIdQueryInput {
	return v.value
}

func (v *NullableReferenceIdQueryInput) Set(val *ReferenceIdQueryInput) {
	v.value = val
	v.isSet = true
}

func (v NullableReferenceIdQueryInput) IsSet() bool {
	return v.isSet
}

func (v *NullableReferenceIdQueryInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReferenceIdQueryInput(val *ReferenceIdQueryInput) *NullableReferenceIdQueryInput {
	return &NullableReferenceIdQueryInput{value: val, isSet: true}
}

func (v NullableReferenceIdQueryInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReferenceIdQueryInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


