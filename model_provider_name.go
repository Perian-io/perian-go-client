/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.2.8
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package perian

import (
	"encoding/json"
	"fmt"
)

// ProviderName Provider names enum.
type ProviderName string

// List of ProviderName
const (
	PROVIDERNAME_OPEN_TELEKOM_CLOUD ProviderName = "Open Telekom Cloud"
	PROVIDERNAME_OVH_CLOUD ProviderName = "OVH Cloud"
	PROVIDERNAME_EXOSCALE ProviderName = "Exoscale"
	PROVIDERNAME_DATA_CRUNCH ProviderName = "DataCrunch"
	PROVIDERNAME_GRIDSCALE ProviderName = "Gridscale"
	PROVIDERNAME_TAIGA_CLOUD ProviderName = "Taiga Cloud"
	PROVIDERNAME_GOOGLE_CLOUD_PLATFORM ProviderName = "Google Cloud Platform"
	PROVIDERNAME_UNDEFINED ProviderName = "UNDEFINED"
)

// All allowed values of ProviderName enum
var AllowedProviderNameEnumValues = []ProviderName{
	"Open Telekom Cloud",
	"OVH Cloud",
	"Exoscale",
	"DataCrunch",
	"Gridscale",
	"Taiga Cloud",
	"Google Cloud Platform",
	"UNDEFINED",
}

func (v *ProviderName) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ProviderName(value)
	for _, existing := range AllowedProviderNameEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ProviderName", value)
}

// NewProviderNameFromValue returns a pointer to a valid ProviderName
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewProviderNameFromValue(v string) (*ProviderName, error) {
	ev := ProviderName(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ProviderName: valid values are %v", v, AllowedProviderNameEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ProviderName) IsValid() bool {
	for _, existing := range AllowedProviderNameEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ProviderName value
func (v ProviderName) Ptr() *ProviderName {
	return &v
}

type NullableProviderName struct {
	value *ProviderName
	isSet bool
}

func (v NullableProviderName) Get() *ProviderName {
	return v.value
}

func (v *NullableProviderName) Set(val *ProviderName) {
	v.value = val
	v.isSet = true
}

func (v NullableProviderName) IsSet() bool {
	return v.isSet
}

func (v *NullableProviderName) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProviderName(val *ProviderName) *NullableProviderName {
	return &NullableProviderName{value: val, isSet: true}
}

func (v NullableProviderName) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProviderName) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

