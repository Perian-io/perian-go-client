/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.2.8
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package perian

import (
	"encoding/json"
)

// checks if the RequirementMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RequirementMetadata{}

// RequirementMetadata JSON schema for the requirements_metadata column.
type RequirementMetadata struct {
	OsStorageConfig *OSStorageConfig `json:"os_storage_config,omitempty"`
	Requirements NullableInstanceTypeQueryOutput `json:"requirements,omitempty"`
}

// NewRequirementMetadata instantiates a new RequirementMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRequirementMetadata() *RequirementMetadata {
	this := RequirementMetadata{}
	var osStorageConfig OSStorageConfig = {size=50}
	this.OsStorageConfig = &osStorageConfig
	return &this
}

// NewRequirementMetadataWithDefaults instantiates a new RequirementMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRequirementMetadataWithDefaults() *RequirementMetadata {
	this := RequirementMetadata{}
	var osStorageConfig OSStorageConfig = {size=50}
	this.OsStorageConfig = &osStorageConfig
	return &this
}

// GetOsStorageConfig returns the OsStorageConfig field value if set, zero value otherwise.
func (o *RequirementMetadata) GetOsStorageConfig() OSStorageConfig {
	if o == nil || IsNil(o.OsStorageConfig) {
		var ret OSStorageConfig
		return ret
	}
	return *o.OsStorageConfig
}

// GetOsStorageConfigOk returns a tuple with the OsStorageConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequirementMetadata) GetOsStorageConfigOk() (*OSStorageConfig, bool) {
	if o == nil || IsNil(o.OsStorageConfig) {
		return nil, false
	}
	return o.OsStorageConfig, true
}

// HasOsStorageConfig returns a boolean if a field has been set.
func (o *RequirementMetadata) HasOsStorageConfig() bool {
	if o != nil && !IsNil(o.OsStorageConfig) {
		return true
	}

	return false
}

// SetOsStorageConfig gets a reference to the given OSStorageConfig and assigns it to the OsStorageConfig field.
func (o *RequirementMetadata) SetOsStorageConfig(v OSStorageConfig) {
	o.OsStorageConfig = &v
}

// GetRequirements returns the Requirements field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RequirementMetadata) GetRequirements() InstanceTypeQueryOutput {
	if o == nil || IsNil(o.Requirements.Get()) {
		var ret InstanceTypeQueryOutput
		return ret
	}
	return *o.Requirements.Get()
}

// GetRequirementsOk returns a tuple with the Requirements field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RequirementMetadata) GetRequirementsOk() (*InstanceTypeQueryOutput, bool) {
	if o == nil {
		return nil, false
	}
	return o.Requirements.Get(), o.Requirements.IsSet()
}

// HasRequirements returns a boolean if a field has been set.
func (o *RequirementMetadata) HasRequirements() bool {
	if o != nil && o.Requirements.IsSet() {
		return true
	}

	return false
}

// SetRequirements gets a reference to the given NullableInstanceTypeQueryOutput and assigns it to the Requirements field.
func (o *RequirementMetadata) SetRequirements(v InstanceTypeQueryOutput) {
	o.Requirements.Set(&v)
}
// SetRequirementsNil sets the value for Requirements to be an explicit nil
func (o *RequirementMetadata) SetRequirementsNil() {
	o.Requirements.Set(nil)
}

// UnsetRequirements ensures that no value is present for Requirements, not even an explicit nil
func (o *RequirementMetadata) UnsetRequirements() {
	o.Requirements.Unset()
}

func (o RequirementMetadata) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RequirementMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.OsStorageConfig) {
		toSerialize["os_storage_config"] = o.OsStorageConfig
	}
	if o.Requirements.IsSet() {
		toSerialize["requirements"] = o.Requirements.Get()
	}
	return toSerialize, nil
}

type NullableRequirementMetadata struct {
	value *RequirementMetadata
	isSet bool
}

func (v NullableRequirementMetadata) Get() *RequirementMetadata {
	return v.value
}

func (v *NullableRequirementMetadata) Set(val *RequirementMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableRequirementMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableRequirementMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRequirementMetadata(val *RequirementMetadata) *NullableRequirementMetadata {
	return &NullableRequirementMetadata{value: val, isSet: true}
}

func (v NullableRequirementMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRequirementMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


