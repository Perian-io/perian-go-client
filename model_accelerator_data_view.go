/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.2.8
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package perian

import (
	"encoding/json"
)

// checks if the AcceleratorDataView type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AcceleratorDataView{}

// AcceleratorDataView struct for AcceleratorDataView
type AcceleratorDataView struct {
	No *int32 `json:"no,omitempty"`
	Memory *Memory `json:"memory,omitempty"`
	AcceleratorTypes []AcceleratorTypeView `json:"accelerator_types,omitempty"`
}

// NewAcceleratorDataView instantiates a new AcceleratorDataView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAcceleratorDataView() *AcceleratorDataView {
	this := AcceleratorDataView{}
	var no int32 = 0
	this.No = &no
	var memory Memory = {size=0.0, unit=Gb, bandwidth={limit=Undefined, maximum=0.0, minimum=0.0, sla=Undefined, speed=0.0, unit=Undefined}, interface=Undefined}
	this.Memory = &memory
	return &this
}

// NewAcceleratorDataViewWithDefaults instantiates a new AcceleratorDataView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAcceleratorDataViewWithDefaults() *AcceleratorDataView {
	this := AcceleratorDataView{}
	var no int32 = 0
	this.No = &no
	var memory Memory = {size=0.0, unit=Gb, bandwidth={limit=Undefined, maximum=0.0, minimum=0.0, sla=Undefined, speed=0.0, unit=Undefined}, interface=Undefined}
	this.Memory = &memory
	return &this
}

// GetNo returns the No field value if set, zero value otherwise.
func (o *AcceleratorDataView) GetNo() int32 {
	if o == nil || IsNil(o.No) {
		var ret int32
		return ret
	}
	return *o.No
}

// GetNoOk returns a tuple with the No field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AcceleratorDataView) GetNoOk() (*int32, bool) {
	if o == nil || IsNil(o.No) {
		return nil, false
	}
	return o.No, true
}

// HasNo returns a boolean if a field has been set.
func (o *AcceleratorDataView) HasNo() bool {
	if o != nil && !IsNil(o.No) {
		return true
	}

	return false
}

// SetNo gets a reference to the given int32 and assigns it to the No field.
func (o *AcceleratorDataView) SetNo(v int32) {
	o.No = &v
}

// GetMemory returns the Memory field value if set, zero value otherwise.
func (o *AcceleratorDataView) GetMemory() Memory {
	if o == nil || IsNil(o.Memory) {
		var ret Memory
		return ret
	}
	return *o.Memory
}

// GetMemoryOk returns a tuple with the Memory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AcceleratorDataView) GetMemoryOk() (*Memory, bool) {
	if o == nil || IsNil(o.Memory) {
		return nil, false
	}
	return o.Memory, true
}

// HasMemory returns a boolean if a field has been set.
func (o *AcceleratorDataView) HasMemory() bool {
	if o != nil && !IsNil(o.Memory) {
		return true
	}

	return false
}

// SetMemory gets a reference to the given Memory and assigns it to the Memory field.
func (o *AcceleratorDataView) SetMemory(v Memory) {
	o.Memory = &v
}

// GetAcceleratorTypes returns the AcceleratorTypes field value if set, zero value otherwise.
func (o *AcceleratorDataView) GetAcceleratorTypes() []AcceleratorTypeView {
	if o == nil || IsNil(o.AcceleratorTypes) {
		var ret []AcceleratorTypeView
		return ret
	}
	return o.AcceleratorTypes
}

// GetAcceleratorTypesOk returns a tuple with the AcceleratorTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AcceleratorDataView) GetAcceleratorTypesOk() ([]AcceleratorTypeView, bool) {
	if o == nil || IsNil(o.AcceleratorTypes) {
		return nil, false
	}
	return o.AcceleratorTypes, true
}

// HasAcceleratorTypes returns a boolean if a field has been set.
func (o *AcceleratorDataView) HasAcceleratorTypes() bool {
	if o != nil && !IsNil(o.AcceleratorTypes) {
		return true
	}

	return false
}

// SetAcceleratorTypes gets a reference to the given []AcceleratorTypeView and assigns it to the AcceleratorTypes field.
func (o *AcceleratorDataView) SetAcceleratorTypes(v []AcceleratorTypeView) {
	o.AcceleratorTypes = v
}

func (o AcceleratorDataView) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AcceleratorDataView) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.No) {
		toSerialize["no"] = o.No
	}
	if !IsNil(o.Memory) {
		toSerialize["memory"] = o.Memory
	}
	if !IsNil(o.AcceleratorTypes) {
		toSerialize["accelerator_types"] = o.AcceleratorTypes
	}
	return toSerialize, nil
}

type NullableAcceleratorDataView struct {
	value *AcceleratorDataView
	isSet bool
}

func (v NullableAcceleratorDataView) Get() *AcceleratorDataView {
	return v.value
}

func (v *NullableAcceleratorDataView) Set(val *AcceleratorDataView) {
	v.value = val
	v.isSet = true
}

func (v NullableAcceleratorDataView) IsSet() bool {
	return v.isSet
}

func (v *NullableAcceleratorDataView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAcceleratorDataView(val *AcceleratorDataView) *NullableAcceleratorDataView {
	return &NullableAcceleratorDataView{value: val, isSet: true}
}

func (v NullableAcceleratorDataView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAcceleratorDataView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


