/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.2.8
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package perian

import (
	"encoding/json"
	"fmt"
)

// BillingGranularity Get the number of units of granularity in the given time range, rounded up.
type BillingGranularity string

// List of BillingGranularity
const (
	PER_SECOND BillingGranularity = "PER_SECOND"
	PER_MINUTE BillingGranularity = "PER_MINUTE"
	PER_HOUR BillingGranularity = "PER_HOUR"
	PER_10_MINUTES BillingGranularity = "PER_10_MINUTES"
	UNDEFINED BillingGranularity = "UNDEFINED"
)

// All allowed values of BillingGranularity enum
var AllowedBillingGranularityEnumValues = []BillingGranularity{
	"PER_SECOND",
	"PER_MINUTE",
	"PER_HOUR",
	"PER_10_MINUTES",
	"UNDEFINED",
}

func (v *BillingGranularity) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BillingGranularity(value)
	for _, existing := range AllowedBillingGranularityEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BillingGranularity", value)
}

// NewBillingGranularityFromValue returns a pointer to a valid BillingGranularity
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBillingGranularityFromValue(v string) (*BillingGranularity, error) {
	ev := BillingGranularity(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BillingGranularity: valid values are %v", v, AllowedBillingGranularityEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BillingGranularity) IsValid() bool {
	for _, existing := range AllowedBillingGranularityEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BillingGranularity value
func (v BillingGranularity) Ptr() *BillingGranularity {
	return &v
}

type NullableBillingGranularity struct {
	value *BillingGranularity
	isSet bool
}

func (v NullableBillingGranularity) Get() *BillingGranularity {
	return v.value
}

func (v *NullableBillingGranularity) Set(val *BillingGranularity) {
	v.value = val
	v.isSet = true
}

func (v NullableBillingGranularity) IsSet() bool {
	return v.isSet
}

func (v *NullableBillingGranularity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBillingGranularity(val *BillingGranularity) *NullableBillingGranularity {
	return &NullableBillingGranularity{value: val, isSet: true}
}

func (v NullableBillingGranularity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBillingGranularity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

