/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.2.8
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package perian

import (
	"encoding/json"
)

// checks if the DockerRunParameters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DockerRunParameters{}

// DockerRunParameters DockerRunParameters JSON schema for the docker_run_parameters JSON column.
type DockerRunParameters struct {
	ImageName *string `json:"image_name,omitempty"`
	ImageTag NullableString `json:"image_tag,omitempty"`
	Command NullableString `json:"command,omitempty"`
	EnvVariables map[string]interface{} `json:"env_variables,omitempty"`
	Secrets map[string]interface{} `json:"secrets,omitempty"`
	ContainerFiles []ContainerFile `json:"container_files,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DockerRunParameters DockerRunParameters

// NewDockerRunParameters instantiates a new DockerRunParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDockerRunParameters() *DockerRunParameters {
	this := DockerRunParameters{}
	var imageName string = ""
	this.ImageName = &imageName
	return &this
}

// NewDockerRunParametersWithDefaults instantiates a new DockerRunParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDockerRunParametersWithDefaults() *DockerRunParameters {
	this := DockerRunParameters{}
	var imageName string = ""
	this.ImageName = &imageName
	return &this
}

// GetImageName returns the ImageName field value if set, zero value otherwise.
func (o *DockerRunParameters) GetImageName() string {
	if o == nil || IsNil(o.ImageName) {
		var ret string
		return ret
	}
	return *o.ImageName
}

// GetImageNameOk returns a tuple with the ImageName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DockerRunParameters) GetImageNameOk() (*string, bool) {
	if o == nil || IsNil(o.ImageName) {
		return nil, false
	}
	return o.ImageName, true
}

// HasImageName returns a boolean if a field has been set.
func (o *DockerRunParameters) HasImageName() bool {
	if o != nil && !IsNil(o.ImageName) {
		return true
	}

	return false
}

// SetImageName gets a reference to the given string and assigns it to the ImageName field.
func (o *DockerRunParameters) SetImageName(v string) {
	o.ImageName = &v
}

// GetImageTag returns the ImageTag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DockerRunParameters) GetImageTag() string {
	if o == nil || IsNil(o.ImageTag.Get()) {
		var ret string
		return ret
	}
	return *o.ImageTag.Get()
}

// GetImageTagOk returns a tuple with the ImageTag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DockerRunParameters) GetImageTagOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ImageTag.Get(), o.ImageTag.IsSet()
}

// HasImageTag returns a boolean if a field has been set.
func (o *DockerRunParameters) HasImageTag() bool {
	if o != nil && o.ImageTag.IsSet() {
		return true
	}

	return false
}

// SetImageTag gets a reference to the given NullableString and assigns it to the ImageTag field.
func (o *DockerRunParameters) SetImageTag(v string) {
	o.ImageTag.Set(&v)
}
// SetImageTagNil sets the value for ImageTag to be an explicit nil
func (o *DockerRunParameters) SetImageTagNil() {
	o.ImageTag.Set(nil)
}

// UnsetImageTag ensures that no value is present for ImageTag, not even an explicit nil
func (o *DockerRunParameters) UnsetImageTag() {
	o.ImageTag.Unset()
}

// GetCommand returns the Command field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DockerRunParameters) GetCommand() string {
	if o == nil || IsNil(o.Command.Get()) {
		var ret string
		return ret
	}
	return *o.Command.Get()
}

// GetCommandOk returns a tuple with the Command field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DockerRunParameters) GetCommandOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Command.Get(), o.Command.IsSet()
}

// HasCommand returns a boolean if a field has been set.
func (o *DockerRunParameters) HasCommand() bool {
	if o != nil && o.Command.IsSet() {
		return true
	}

	return false
}

// SetCommand gets a reference to the given NullableString and assigns it to the Command field.
func (o *DockerRunParameters) SetCommand(v string) {
	o.Command.Set(&v)
}
// SetCommandNil sets the value for Command to be an explicit nil
func (o *DockerRunParameters) SetCommandNil() {
	o.Command.Set(nil)
}

// UnsetCommand ensures that no value is present for Command, not even an explicit nil
func (o *DockerRunParameters) UnsetCommand() {
	o.Command.Unset()
}

// GetEnvVariables returns the EnvVariables field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DockerRunParameters) GetEnvVariables() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.EnvVariables
}

// GetEnvVariablesOk returns a tuple with the EnvVariables field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DockerRunParameters) GetEnvVariablesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.EnvVariables) {
		return map[string]interface{}{}, false
	}
	return o.EnvVariables, true
}

// HasEnvVariables returns a boolean if a field has been set.
func (o *DockerRunParameters) HasEnvVariables() bool {
	if o != nil && !IsNil(o.EnvVariables) {
		return true
	}

	return false
}

// SetEnvVariables gets a reference to the given map[string]interface{} and assigns it to the EnvVariables field.
func (o *DockerRunParameters) SetEnvVariables(v map[string]interface{}) {
	o.EnvVariables = v
}

// GetSecrets returns the Secrets field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DockerRunParameters) GetSecrets() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Secrets
}

// GetSecretsOk returns a tuple with the Secrets field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DockerRunParameters) GetSecretsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Secrets) {
		return map[string]interface{}{}, false
	}
	return o.Secrets, true
}

// HasSecrets returns a boolean if a field has been set.
func (o *DockerRunParameters) HasSecrets() bool {
	if o != nil && !IsNil(o.Secrets) {
		return true
	}

	return false
}

// SetSecrets gets a reference to the given map[string]interface{} and assigns it to the Secrets field.
func (o *DockerRunParameters) SetSecrets(v map[string]interface{}) {
	o.Secrets = v
}

// GetContainerFiles returns the ContainerFiles field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DockerRunParameters) GetContainerFiles() []ContainerFile {
	if o == nil {
		var ret []ContainerFile
		return ret
	}
	return o.ContainerFiles
}

// GetContainerFilesOk returns a tuple with the ContainerFiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DockerRunParameters) GetContainerFilesOk() ([]ContainerFile, bool) {
	if o == nil || IsNil(o.ContainerFiles) {
		return nil, false
	}
	return o.ContainerFiles, true
}

// HasContainerFiles returns a boolean if a field has been set.
func (o *DockerRunParameters) HasContainerFiles() bool {
	if o != nil && !IsNil(o.ContainerFiles) {
		return true
	}

	return false
}

// SetContainerFiles gets a reference to the given []ContainerFile and assigns it to the ContainerFiles field.
func (o *DockerRunParameters) SetContainerFiles(v []ContainerFile) {
	o.ContainerFiles = v
}

func (o DockerRunParameters) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DockerRunParameters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ImageName) {
		toSerialize["image_name"] = o.ImageName
	}
	if o.ImageTag.IsSet() {
		toSerialize["image_tag"] = o.ImageTag.Get()
	}
	if o.Command.IsSet() {
		toSerialize["command"] = o.Command.Get()
	}
	if o.EnvVariables != nil {
		toSerialize["env_variables"] = o.EnvVariables
	}
	if o.Secrets != nil {
		toSerialize["secrets"] = o.Secrets
	}
	if o.ContainerFiles != nil {
		toSerialize["container_files"] = o.ContainerFiles
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DockerRunParameters) UnmarshalJSON(data []byte) (err error) {
	varDockerRunParameters := _DockerRunParameters{}

	err = json.Unmarshal(data, &varDockerRunParameters)

	if err != nil {
		return err
	}

	*o = DockerRunParameters(varDockerRunParameters)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "image_name")
		delete(additionalProperties, "image_tag")
		delete(additionalProperties, "command")
		delete(additionalProperties, "env_variables")
		delete(additionalProperties, "secrets")
		delete(additionalProperties, "container_files")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDockerRunParameters struct {
	value *DockerRunParameters
	isSet bool
}

func (v NullableDockerRunParameters) Get() *DockerRunParameters {
	return v.value
}

func (v *NullableDockerRunParameters) Set(val *DockerRunParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableDockerRunParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableDockerRunParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDockerRunParameters(val *DockerRunParameters) *NullableDockerRunParameters {
	return &NullableDockerRunParameters{value: val, isSet: true}
}

func (v NullableDockerRunParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDockerRunParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


