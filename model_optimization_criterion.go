/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.2.8
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package perian

import (
	"encoding/json"
	"fmt"
)

// OptimizationCriterion Enum class representing the optimization criterion.
type OptimizationCriterion string

// List of OptimizationCriterion
const (
	OPTIMIZATIONCRITERION_PRICE OptimizationCriterion = "PRICE"
)

// All allowed values of OptimizationCriterion enum
var AllowedOptimizationCriterionEnumValues = []OptimizationCriterion{
	"PRICE",
}

func (v *OptimizationCriterion) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OptimizationCriterion(value)
	for _, existing := range AllowedOptimizationCriterionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OptimizationCriterion", value)
}

// NewOptimizationCriterionFromValue returns a pointer to a valid OptimizationCriterion
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOptimizationCriterionFromValue(v string) (*OptimizationCriterion, error) {
	ev := OptimizationCriterion(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OptimizationCriterion: valid values are %v", v, AllowedOptimizationCriterionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OptimizationCriterion) IsValid() bool {
	for _, existing := range AllowedOptimizationCriterionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OptimizationCriterion value
func (v OptimizationCriterion) Ptr() *OptimizationCriterion {
	return &v
}

type NullableOptimizationCriterion struct {
	value *OptimizationCriterion
	isSet bool
}

func (v NullableOptimizationCriterion) Get() *OptimizationCriterion {
	return v.value
}

func (v *NullableOptimizationCriterion) Set(val *OptimizationCriterion) {
	v.value = val
	v.isSet = true
}

func (v NullableOptimizationCriterion) IsSet() bool {
	return v.isSet
}

func (v *NullableOptimizationCriterion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOptimizationCriterion(val *OptimizationCriterion) *NullableOptimizationCriterion {
	return &NullableOptimizationCriterion{value: val, isSet: true}
}

func (v NullableOptimizationCriterion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOptimizationCriterion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

