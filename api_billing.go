/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.2.8
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package perian

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"time"
)


// BillingAPIService BillingAPI service
type BillingAPIService service

type ApiCreditTopUpRequest struct {
	ctx context.Context
	ApiService *BillingAPIService
	creditTopUpRequest *CreditTopUpRequest
}

func (r ApiCreditTopUpRequest) CreditTopUpRequest(creditTopUpRequest CreditTopUpRequest) ApiCreditTopUpRequest {
	r.creditTopUpRequest = &creditTopUpRequest
	return r
}

func (r ApiCreditTopUpRequest) Execute() (*CreditTopUpResponse, *http.Response, error) {
	return r.ApiService.CreditTopUpExecute(r)
}

/*
CreditTopUp Credit Top Up

Endpoint for organization credit topup.

Args:
    organization: Authenticated organization.
    topup_request(CreditTopupRequest).

Returns:
    CreditTopupResponse.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreditTopUpRequest
*/
func (a *BillingAPIService) CreditTopUp(ctx context.Context) ApiCreditTopUpRequest {
	return ApiCreditTopUpRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CreditTopUpResponse
func (a *BillingAPIService) CreditTopUpExecute(r ApiCreditTopUpRequest) (*CreditTopUpResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreditTopUpResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BillingAPIService.CreditTopUp")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/billing/top-up"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.creditTopUpRequest == nil {
		return localVarReturnValue, nil, reportError("creditTopUpRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.creditTopUpRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGenerateBillRequest struct {
	ctx context.Context
	ApiService *BillingAPIService
	organization *string
	currency *string
	startTime *time.Time
	endTime *time.Time
}

// Name of the organization
func (r ApiGenerateBillRequest) Organization(organization string) ApiGenerateBillRequest {
	r.organization = &organization
	return r
}

// Currency
func (r ApiGenerateBillRequest) Currency(currency string) ApiGenerateBillRequest {
	r.currency = &currency
	return r
}

// Start time - defaults to the beginning of the last month
func (r ApiGenerateBillRequest) StartTime(startTime time.Time) ApiGenerateBillRequest {
	r.startTime = &startTime
	return r
}

// End time - defaults to the end of the last month
func (r ApiGenerateBillRequest) EndTime(endTime time.Time) ApiGenerateBillRequest {
	r.endTime = &endTime
	return r
}

func (r ApiGenerateBillRequest) Execute() (*Bill, *http.Response, error) {
	return r.ApiService.GenerateBillExecute(r)
}

/*
GenerateBill Generate Bill

Endpoint to generate a bill for the organization.

Args:
    organization: current authenticated organization.
    organization_name (str): Name of the organization.
    currency (Optional[str]): Currency. Defaults to Currency.EUR.
    start_time (Optional[datetime]): Start time - defaults to the beginning of the last month.
    end_time (Optional[datetime]): End time - defaults to the end of the last month.

Returns:
    The generated bill for the organization.

Raises:
    UnknownCurrencyError: If the currency is not valid.
    InvalidDateOrderError: If the start time is greater than the end time.
    OrganizationNotFoundError: If the organization is not found.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGenerateBillRequest
*/
func (a *BillingAPIService) GenerateBill(ctx context.Context) ApiGenerateBillRequest {
	return ApiGenerateBillRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Bill
func (a *BillingAPIService) GenerateBillExecute(r ApiGenerateBillRequest) (*Bill, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Bill
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BillingAPIService.GenerateBill")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/billing/generate"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.organization == nil {
		return localVarReturnValue, nil, reportError("organization is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "organization", r.organization, "")
	if r.currency != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "currency", r.currency, "")
	} else {
		var defaultValue string = "EUR"
		r.currency = &defaultValue
	}
	if r.startTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start_time", r.startTime, "")
	}
	if r.endTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "end_time", r.endTime, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetRemainingCreditsRequest struct {
	ctx context.Context
	ApiService *BillingAPIService
}

func (r ApiGetRemainingCreditsRequest) Execute() (*RemainingCreditsResponse, *http.Response, error) {
	return r.ApiService.GetRemainingCreditsExecute(r)
}

/*
GetRemainingCredits Get Remaining Credits

Get the remaining credits for the organization.

Args:
    organization: Authenticated organization.

Returns:
    dict: A dictionary containing the remaining credits for the organization.

Raises:
    HTTPException: If the organization is on an unlimited plan and does not have a credits account.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetRemainingCreditsRequest
*/
func (a *BillingAPIService) GetRemainingCredits(ctx context.Context) ApiGetRemainingCreditsRequest {
	return ApiGetRemainingCreditsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return RemainingCreditsResponse
func (a *BillingAPIService) GetRemainingCreditsExecute(r ApiGetRemainingCreditsRequest) (*RemainingCreditsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RemainingCreditsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BillingAPIService.GetRemainingCredits")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/billing/remaining-credits"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
