/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.2.8
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package perian

import (
	"encoding/json"
)

// checks if the CpuData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CpuData{}

// CpuData struct for CpuData
type CpuData struct {
	No *int32 `json:"no,omitempty"`
	Cores *int32 `json:"cores,omitempty"`
	Threads *int32 `json:"threads,omitempty"`
	Cpus []Cpu `json:"cpus,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CpuData CpuData

// NewCpuData instantiates a new CpuData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCpuData() *CpuData {
	this := CpuData{}
	var no int32 = 0
	this.No = &no
	var cores int32 = 0
	this.Cores = &cores
	var threads int32 = 0
	this.Threads = &threads
	return &this
}

// NewCpuDataWithDefaults instantiates a new CpuData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCpuDataWithDefaults() *CpuData {
	this := CpuData{}
	var no int32 = 0
	this.No = &no
	var cores int32 = 0
	this.Cores = &cores
	var threads int32 = 0
	this.Threads = &threads
	return &this
}

// GetNo returns the No field value if set, zero value otherwise.
func (o *CpuData) GetNo() int32 {
	if o == nil || IsNil(o.No) {
		var ret int32
		return ret
	}
	return *o.No
}

// GetNoOk returns a tuple with the No field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CpuData) GetNoOk() (*int32, bool) {
	if o == nil || IsNil(o.No) {
		return nil, false
	}
	return o.No, true
}

// HasNo returns a boolean if a field has been set.
func (o *CpuData) HasNo() bool {
	if o != nil && !IsNil(o.No) {
		return true
	}

	return false
}

// SetNo gets a reference to the given int32 and assigns it to the No field.
func (o *CpuData) SetNo(v int32) {
	o.No = &v
}

// GetCores returns the Cores field value if set, zero value otherwise.
func (o *CpuData) GetCores() int32 {
	if o == nil || IsNil(o.Cores) {
		var ret int32
		return ret
	}
	return *o.Cores
}

// GetCoresOk returns a tuple with the Cores field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CpuData) GetCoresOk() (*int32, bool) {
	if o == nil || IsNil(o.Cores) {
		return nil, false
	}
	return o.Cores, true
}

// HasCores returns a boolean if a field has been set.
func (o *CpuData) HasCores() bool {
	if o != nil && !IsNil(o.Cores) {
		return true
	}

	return false
}

// SetCores gets a reference to the given int32 and assigns it to the Cores field.
func (o *CpuData) SetCores(v int32) {
	o.Cores = &v
}

// GetThreads returns the Threads field value if set, zero value otherwise.
func (o *CpuData) GetThreads() int32 {
	if o == nil || IsNil(o.Threads) {
		var ret int32
		return ret
	}
	return *o.Threads
}

// GetThreadsOk returns a tuple with the Threads field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CpuData) GetThreadsOk() (*int32, bool) {
	if o == nil || IsNil(o.Threads) {
		return nil, false
	}
	return o.Threads, true
}

// HasThreads returns a boolean if a field has been set.
func (o *CpuData) HasThreads() bool {
	if o != nil && !IsNil(o.Threads) {
		return true
	}

	return false
}

// SetThreads gets a reference to the given int32 and assigns it to the Threads field.
func (o *CpuData) SetThreads(v int32) {
	o.Threads = &v
}

// GetCpus returns the Cpus field value if set, zero value otherwise.
func (o *CpuData) GetCpus() []Cpu {
	if o == nil || IsNil(o.Cpus) {
		var ret []Cpu
		return ret
	}
	return o.Cpus
}

// GetCpusOk returns a tuple with the Cpus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CpuData) GetCpusOk() ([]Cpu, bool) {
	if o == nil || IsNil(o.Cpus) {
		return nil, false
	}
	return o.Cpus, true
}

// HasCpus returns a boolean if a field has been set.
func (o *CpuData) HasCpus() bool {
	if o != nil && !IsNil(o.Cpus) {
		return true
	}

	return false
}

// SetCpus gets a reference to the given []Cpu and assigns it to the Cpus field.
func (o *CpuData) SetCpus(v []Cpu) {
	o.Cpus = v
}

func (o CpuData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CpuData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.No) {
		toSerialize["no"] = o.No
	}
	if !IsNil(o.Cores) {
		toSerialize["cores"] = o.Cores
	}
	if !IsNil(o.Threads) {
		toSerialize["threads"] = o.Threads
	}
	if !IsNil(o.Cpus) {
		toSerialize["cpus"] = o.Cpus
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CpuData) UnmarshalJSON(data []byte) (err error) {
	varCpuData := _CpuData{}

	err = json.Unmarshal(data, &varCpuData)

	if err != nil {
		return err
	}

	*o = CpuData(varCpuData)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "no")
		delete(additionalProperties, "cores")
		delete(additionalProperties, "threads")
		delete(additionalProperties, "cpus")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCpuData struct {
	value *CpuData
	isSet bool
}

func (v NullableCpuData) Get() *CpuData {
	return v.value
}

func (v *NullableCpuData) Set(val *CpuData) {
	v.value = val
	v.isSet = true
}

func (v NullableCpuData) IsSet() bool {
	return v.isSet
}

func (v *NullableCpuData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCpuData(val *CpuData) *NullableCpuData {
	return &NullableCpuData{value: val, isSet: true}
}

func (v NullableCpuData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCpuData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


