/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.2.8
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package perian

import (
	"encoding/json"
	"fmt"
)

// Response400GetInstanceTypeById struct for Response400GetInstanceTypeById
type Response400GetInstanceTypeById struct {
	DefaultClientError *DefaultClientError
	SrcApiRouterInstanceTypeIncorrectParameterError *SrcApiRouterInstanceTypeIncorrectParameterError
	SrcApiRouterInstanceTypeInstanceTypeNotFoundError *SrcApiRouterInstanceTypeInstanceTypeNotFoundError
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *Response400GetInstanceTypeById) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into DefaultClientError
	err = json.Unmarshal(data, &dst.DefaultClientError);
	if err == nil {
		jsonDefaultClientError, _ := json.Marshal(dst.DefaultClientError)
		if string(jsonDefaultClientError) == "{}" { // empty struct
			dst.DefaultClientError = nil
		} else {
			return nil // data stored in dst.DefaultClientError, return on the first match
		}
	} else {
		dst.DefaultClientError = nil
	}

	// try to unmarshal JSON data into SrcApiRouterInstanceTypeIncorrectParameterError
	err = json.Unmarshal(data, &dst.SrcApiRouterInstanceTypeIncorrectParameterError);
	if err == nil {
		jsonSrcApiRouterInstanceTypeIncorrectParameterError, _ := json.Marshal(dst.SrcApiRouterInstanceTypeIncorrectParameterError)
		if string(jsonSrcApiRouterInstanceTypeIncorrectParameterError) == "{}" { // empty struct
			dst.SrcApiRouterInstanceTypeIncorrectParameterError = nil
		} else {
			return nil // data stored in dst.SrcApiRouterInstanceTypeIncorrectParameterError, return on the first match
		}
	} else {
		dst.SrcApiRouterInstanceTypeIncorrectParameterError = nil
	}

	// try to unmarshal JSON data into SrcApiRouterInstanceTypeInstanceTypeNotFoundError
	err = json.Unmarshal(data, &dst.SrcApiRouterInstanceTypeInstanceTypeNotFoundError);
	if err == nil {
		jsonSrcApiRouterInstanceTypeInstanceTypeNotFoundError, _ := json.Marshal(dst.SrcApiRouterInstanceTypeInstanceTypeNotFoundError)
		if string(jsonSrcApiRouterInstanceTypeInstanceTypeNotFoundError) == "{}" { // empty struct
			dst.SrcApiRouterInstanceTypeInstanceTypeNotFoundError = nil
		} else {
			return nil // data stored in dst.SrcApiRouterInstanceTypeInstanceTypeNotFoundError, return on the first match
		}
	} else {
		dst.SrcApiRouterInstanceTypeInstanceTypeNotFoundError = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(Response400GetInstanceTypeById)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *Response400GetInstanceTypeById) MarshalJSON() ([]byte, error) {
	if src.DefaultClientError != nil {
		return json.Marshal(&src.DefaultClientError)
	}

	if src.SrcApiRouterInstanceTypeIncorrectParameterError != nil {
		return json.Marshal(&src.SrcApiRouterInstanceTypeIncorrectParameterError)
	}

	if src.SrcApiRouterInstanceTypeInstanceTypeNotFoundError != nil {
		return json.Marshal(&src.SrcApiRouterInstanceTypeInstanceTypeNotFoundError)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableResponse400GetInstanceTypeById struct {
	value *Response400GetInstanceTypeById
	isSet bool
}

func (v NullableResponse400GetInstanceTypeById) Get() *Response400GetInstanceTypeById {
	return v.value
}

func (v *NullableResponse400GetInstanceTypeById) Set(val *Response400GetInstanceTypeById) {
	v.value = val
	v.isSet = true
}

func (v NullableResponse400GetInstanceTypeById) IsSet() bool {
	return v.isSet
}

func (v *NullableResponse400GetInstanceTypeById) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponse400GetInstanceTypeById(val *Response400GetInstanceTypeById) *NullableResponse400GetInstanceTypeById {
	return &NullableResponse400GetInstanceTypeById{value: val, isSet: true}
}

func (v NullableResponse400GetInstanceTypeById) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponse400GetInstanceTypeById) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


