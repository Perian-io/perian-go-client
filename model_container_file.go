/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.2.8
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package perian

import (
	"encoding/json"
	"fmt"
)

// checks if the ContainerFile type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContainerFile{}

// ContainerFile Model representation of a file to be mounted in a docker container.
type ContainerFile struct {
	Path string `json:"path"`
	ReadOnly *bool `json:"read_only,omitempty"`
	Base64Content string `json:"base64_content"`
	AdditionalProperties map[string]interface{}
}

type _ContainerFile ContainerFile

// NewContainerFile instantiates a new ContainerFile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContainerFile(path string, base64Content string) *ContainerFile {
	this := ContainerFile{}
	this.Path = path
	var readOnly bool = false
	this.ReadOnly = &readOnly
	this.Base64Content = base64Content
	return &this
}

// NewContainerFileWithDefaults instantiates a new ContainerFile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContainerFileWithDefaults() *ContainerFile {
	this := ContainerFile{}
	var readOnly bool = false
	this.ReadOnly = &readOnly
	return &this
}

// GetPath returns the Path field value
func (o *ContainerFile) GetPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Path
}

// GetPathOk returns a tuple with the Path field value
// and a boolean to check if the value has been set.
func (o *ContainerFile) GetPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Path, true
}

// SetPath sets field value
func (o *ContainerFile) SetPath(v string) {
	o.Path = v
}

// GetReadOnly returns the ReadOnly field value if set, zero value otherwise.
func (o *ContainerFile) GetReadOnly() bool {
	if o == nil || IsNil(o.ReadOnly) {
		var ret bool
		return ret
	}
	return *o.ReadOnly
}

// GetReadOnlyOk returns a tuple with the ReadOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerFile) GetReadOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.ReadOnly) {
		return nil, false
	}
	return o.ReadOnly, true
}

// HasReadOnly returns a boolean if a field has been set.
func (o *ContainerFile) HasReadOnly() bool {
	if o != nil && !IsNil(o.ReadOnly) {
		return true
	}

	return false
}

// SetReadOnly gets a reference to the given bool and assigns it to the ReadOnly field.
func (o *ContainerFile) SetReadOnly(v bool) {
	o.ReadOnly = &v
}

// GetBase64Content returns the Base64Content field value
func (o *ContainerFile) GetBase64Content() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Base64Content
}

// GetBase64ContentOk returns a tuple with the Base64Content field value
// and a boolean to check if the value has been set.
func (o *ContainerFile) GetBase64ContentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Base64Content, true
}

// SetBase64Content sets field value
func (o *ContainerFile) SetBase64Content(v string) {
	o.Base64Content = v
}

func (o ContainerFile) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContainerFile) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["path"] = o.Path
	if !IsNil(o.ReadOnly) {
		toSerialize["read_only"] = o.ReadOnly
	}
	toSerialize["base64_content"] = o.Base64Content

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ContainerFile) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"path",
		"base64_content",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varContainerFile := _ContainerFile{}

	err = json.Unmarshal(data, &varContainerFile)

	if err != nil {
		return err
	}

	*o = ContainerFile(varContainerFile)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "path")
		delete(additionalProperties, "read_only")
		delete(additionalProperties, "base64_content")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableContainerFile struct {
	value *ContainerFile
	isSet bool
}

func (v NullableContainerFile) Get() *ContainerFile {
	return v.value
}

func (v *NullableContainerFile) Set(val *ContainerFile) {
	v.value = val
	v.isSet = true
}

func (v NullableContainerFile) IsSet() bool {
	return v.isSet
}

func (v *NullableContainerFile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContainerFile(val *ContainerFile) *NullableContainerFile {
	return &NullableContainerFile{value: val, isSet: true}
}

func (v NullableContainerFile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContainerFile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


