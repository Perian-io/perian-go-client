/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.2.8
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package perian

import (
	"encoding/json"
	"time"
)

// checks if the InstanceTypeView type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InstanceTypeView{}

// InstanceTypeView Limited View on Model representation of a cloud provider instance type.
type InstanceTypeView struct {
	Id *string `json:"id,omitempty"`
	Name NullableString `json:"name,omitempty"`
	Provider NullableProvider `json:"provider,omitempty"`
	Region NullableRegion `json:"region,omitempty"`
	Zone NullableZone `json:"zone,omitempty"`
	Type *ComputeInstanceType `json:"type,omitempty"`
	Cpu *CpuData `json:"cpu,omitempty"`
	Accelerator *AcceleratorDataView `json:"accelerator,omitempty"`
	Ram *Memory `json:"ram,omitempty"`
	Storage *StorageData `json:"storage,omitempty"`
	Network *Network `json:"network,omitempty"`
	Price *PriceData `json:"price,omitempty"`
	Availability *Availability `json:"availability,omitempty"`
	CreatedAt *time.Time `json:"created_at,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	AttributesHash NullableString `json:"attributes_hash,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _InstanceTypeView InstanceTypeView

// NewInstanceTypeView instantiates a new InstanceTypeView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstanceTypeView() *InstanceTypeView {
	this := InstanceTypeView{}
	var type_ ComputeInstanceType = COMPUTEINSTANCETYPE_UNDEFINED
	this.Type = &type_
	var cpu CpuData = *NewCpuData()
	this.Cpu = &cpu
	var accelerator AcceleratorDataView = *NewAcceleratorDataView()
	this.Accelerator = &accelerator
	var ram Memory = *NewMemory()
	this.Ram = &ram
	var storage StorageData = *NewStorageData()
	this.Storage = &storage
	var network Network = *NewNetwork()
	this.Network = &network
	var price PriceData = *NewPriceData()
	this.Price = &price
	var availability Availability = *NewAvailability()
	this.Availability = &availability
	return &this
}

// NewInstanceTypeViewWithDefaults instantiates a new InstanceTypeView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstanceTypeViewWithDefaults() *InstanceTypeView {
	this := InstanceTypeView{}
	var type_ ComputeInstanceType = COMPUTEINSTANCETYPE_UNDEFINED
	this.Type = &type_
	var cpu CpuData = *NewCpuData()
	this.Cpu = &cpu
	var accelerator AcceleratorDataView = *NewAcceleratorDataView()
	this.Accelerator = &accelerator
	var ram Memory = *NewMemory()
	this.Ram = &ram
	var storage StorageData = *NewStorageData()
	this.Storage = &storage
	var network Network = *NewNetwork()
	this.Network = &network
	var price PriceData = *NewPriceData()
	this.Price = &price
	var availability Availability = *NewAvailability()
	this.Availability = &availability
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *InstanceTypeView) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceTypeView) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *InstanceTypeView) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *InstanceTypeView) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InstanceTypeView) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InstanceTypeView) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *InstanceTypeView) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *InstanceTypeView) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *InstanceTypeView) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *InstanceTypeView) UnsetName() {
	o.Name.Unset()
}

// GetProvider returns the Provider field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InstanceTypeView) GetProvider() Provider {
	if o == nil || IsNil(o.Provider.Get()) {
		var ret Provider
		return ret
	}
	return *o.Provider.Get()
}

// GetProviderOk returns a tuple with the Provider field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InstanceTypeView) GetProviderOk() (*Provider, bool) {
	if o == nil {
		return nil, false
	}
	return o.Provider.Get(), o.Provider.IsSet()
}

// HasProvider returns a boolean if a field has been set.
func (o *InstanceTypeView) HasProvider() bool {
	if o != nil && o.Provider.IsSet() {
		return true
	}

	return false
}

// SetProvider gets a reference to the given NullableProvider and assigns it to the Provider field.
func (o *InstanceTypeView) SetProvider(v Provider) {
	o.Provider.Set(&v)
}
// SetProviderNil sets the value for Provider to be an explicit nil
func (o *InstanceTypeView) SetProviderNil() {
	o.Provider.Set(nil)
}

// UnsetProvider ensures that no value is present for Provider, not even an explicit nil
func (o *InstanceTypeView) UnsetProvider() {
	o.Provider.Unset()
}

// GetRegion returns the Region field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InstanceTypeView) GetRegion() Region {
	if o == nil || IsNil(o.Region.Get()) {
		var ret Region
		return ret
	}
	return *o.Region.Get()
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InstanceTypeView) GetRegionOk() (*Region, bool) {
	if o == nil {
		return nil, false
	}
	return o.Region.Get(), o.Region.IsSet()
}

// HasRegion returns a boolean if a field has been set.
func (o *InstanceTypeView) HasRegion() bool {
	if o != nil && o.Region.IsSet() {
		return true
	}

	return false
}

// SetRegion gets a reference to the given NullableRegion and assigns it to the Region field.
func (o *InstanceTypeView) SetRegion(v Region) {
	o.Region.Set(&v)
}
// SetRegionNil sets the value for Region to be an explicit nil
func (o *InstanceTypeView) SetRegionNil() {
	o.Region.Set(nil)
}

// UnsetRegion ensures that no value is present for Region, not even an explicit nil
func (o *InstanceTypeView) UnsetRegion() {
	o.Region.Unset()
}

// GetZone returns the Zone field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InstanceTypeView) GetZone() Zone {
	if o == nil || IsNil(o.Zone.Get()) {
		var ret Zone
		return ret
	}
	return *o.Zone.Get()
}

// GetZoneOk returns a tuple with the Zone field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InstanceTypeView) GetZoneOk() (*Zone, bool) {
	if o == nil {
		return nil, false
	}
	return o.Zone.Get(), o.Zone.IsSet()
}

// HasZone returns a boolean if a field has been set.
func (o *InstanceTypeView) HasZone() bool {
	if o != nil && o.Zone.IsSet() {
		return true
	}

	return false
}

// SetZone gets a reference to the given NullableZone and assigns it to the Zone field.
func (o *InstanceTypeView) SetZone(v Zone) {
	o.Zone.Set(&v)
}
// SetZoneNil sets the value for Zone to be an explicit nil
func (o *InstanceTypeView) SetZoneNil() {
	o.Zone.Set(nil)
}

// UnsetZone ensures that no value is present for Zone, not even an explicit nil
func (o *InstanceTypeView) UnsetZone() {
	o.Zone.Unset()
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *InstanceTypeView) GetType() ComputeInstanceType {
	if o == nil || IsNil(o.Type) {
		var ret ComputeInstanceType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceTypeView) GetTypeOk() (*ComputeInstanceType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *InstanceTypeView) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given ComputeInstanceType and assigns it to the Type field.
func (o *InstanceTypeView) SetType(v ComputeInstanceType) {
	o.Type = &v
}

// GetCpu returns the Cpu field value if set, zero value otherwise.
func (o *InstanceTypeView) GetCpu() CpuData {
	if o == nil || IsNil(o.Cpu) {
		var ret CpuData
		return ret
	}
	return *o.Cpu
}

// GetCpuOk returns a tuple with the Cpu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceTypeView) GetCpuOk() (*CpuData, bool) {
	if o == nil || IsNil(o.Cpu) {
		return nil, false
	}
	return o.Cpu, true
}

// HasCpu returns a boolean if a field has been set.
func (o *InstanceTypeView) HasCpu() bool {
	if o != nil && !IsNil(o.Cpu) {
		return true
	}

	return false
}

// SetCpu gets a reference to the given CpuData and assigns it to the Cpu field.
func (o *InstanceTypeView) SetCpu(v CpuData) {
	o.Cpu = &v
}

// GetAccelerator returns the Accelerator field value if set, zero value otherwise.
func (o *InstanceTypeView) GetAccelerator() AcceleratorDataView {
	if o == nil || IsNil(o.Accelerator) {
		var ret AcceleratorDataView
		return ret
	}
	return *o.Accelerator
}

// GetAcceleratorOk returns a tuple with the Accelerator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceTypeView) GetAcceleratorOk() (*AcceleratorDataView, bool) {
	if o == nil || IsNil(o.Accelerator) {
		return nil, false
	}
	return o.Accelerator, true
}

// HasAccelerator returns a boolean if a field has been set.
func (o *InstanceTypeView) HasAccelerator() bool {
	if o != nil && !IsNil(o.Accelerator) {
		return true
	}

	return false
}

// SetAccelerator gets a reference to the given AcceleratorDataView and assigns it to the Accelerator field.
func (o *InstanceTypeView) SetAccelerator(v AcceleratorDataView) {
	o.Accelerator = &v
}

// GetRam returns the Ram field value if set, zero value otherwise.
func (o *InstanceTypeView) GetRam() Memory {
	if o == nil || IsNil(o.Ram) {
		var ret Memory
		return ret
	}
	return *o.Ram
}

// GetRamOk returns a tuple with the Ram field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceTypeView) GetRamOk() (*Memory, bool) {
	if o == nil || IsNil(o.Ram) {
		return nil, false
	}
	return o.Ram, true
}

// HasRam returns a boolean if a field has been set.
func (o *InstanceTypeView) HasRam() bool {
	if o != nil && !IsNil(o.Ram) {
		return true
	}

	return false
}

// SetRam gets a reference to the given Memory and assigns it to the Ram field.
func (o *InstanceTypeView) SetRam(v Memory) {
	o.Ram = &v
}

// GetStorage returns the Storage field value if set, zero value otherwise.
func (o *InstanceTypeView) GetStorage() StorageData {
	if o == nil || IsNil(o.Storage) {
		var ret StorageData
		return ret
	}
	return *o.Storage
}

// GetStorageOk returns a tuple with the Storage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceTypeView) GetStorageOk() (*StorageData, bool) {
	if o == nil || IsNil(o.Storage) {
		return nil, false
	}
	return o.Storage, true
}

// HasStorage returns a boolean if a field has been set.
func (o *InstanceTypeView) HasStorage() bool {
	if o != nil && !IsNil(o.Storage) {
		return true
	}

	return false
}

// SetStorage gets a reference to the given StorageData and assigns it to the Storage field.
func (o *InstanceTypeView) SetStorage(v StorageData) {
	o.Storage = &v
}

// GetNetwork returns the Network field value if set, zero value otherwise.
func (o *InstanceTypeView) GetNetwork() Network {
	if o == nil || IsNil(o.Network) {
		var ret Network
		return ret
	}
	return *o.Network
}

// GetNetworkOk returns a tuple with the Network field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceTypeView) GetNetworkOk() (*Network, bool) {
	if o == nil || IsNil(o.Network) {
		return nil, false
	}
	return o.Network, true
}

// HasNetwork returns a boolean if a field has been set.
func (o *InstanceTypeView) HasNetwork() bool {
	if o != nil && !IsNil(o.Network) {
		return true
	}

	return false
}

// SetNetwork gets a reference to the given Network and assigns it to the Network field.
func (o *InstanceTypeView) SetNetwork(v Network) {
	o.Network = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *InstanceTypeView) GetPrice() PriceData {
	if o == nil || IsNil(o.Price) {
		var ret PriceData
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceTypeView) GetPriceOk() (*PriceData, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *InstanceTypeView) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given PriceData and assigns it to the Price field.
func (o *InstanceTypeView) SetPrice(v PriceData) {
	o.Price = &v
}

// GetAvailability returns the Availability field value if set, zero value otherwise.
func (o *InstanceTypeView) GetAvailability() Availability {
	if o == nil || IsNil(o.Availability) {
		var ret Availability
		return ret
	}
	return *o.Availability
}

// GetAvailabilityOk returns a tuple with the Availability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceTypeView) GetAvailabilityOk() (*Availability, bool) {
	if o == nil || IsNil(o.Availability) {
		return nil, false
	}
	return o.Availability, true
}

// HasAvailability returns a boolean if a field has been set.
func (o *InstanceTypeView) HasAvailability() bool {
	if o != nil && !IsNil(o.Availability) {
		return true
	}

	return false
}

// SetAvailability gets a reference to the given Availability and assigns it to the Availability field.
func (o *InstanceTypeView) SetAvailability(v Availability) {
	o.Availability = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *InstanceTypeView) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceTypeView) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *InstanceTypeView) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *InstanceTypeView) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *InstanceTypeView) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceTypeView) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *InstanceTypeView) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *InstanceTypeView) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetAttributesHash returns the AttributesHash field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InstanceTypeView) GetAttributesHash() string {
	if o == nil || IsNil(o.AttributesHash.Get()) {
		var ret string
		return ret
	}
	return *o.AttributesHash.Get()
}

// GetAttributesHashOk returns a tuple with the AttributesHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InstanceTypeView) GetAttributesHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AttributesHash.Get(), o.AttributesHash.IsSet()
}

// HasAttributesHash returns a boolean if a field has been set.
func (o *InstanceTypeView) HasAttributesHash() bool {
	if o != nil && o.AttributesHash.IsSet() {
		return true
	}

	return false
}

// SetAttributesHash gets a reference to the given NullableString and assigns it to the AttributesHash field.
func (o *InstanceTypeView) SetAttributesHash(v string) {
	o.AttributesHash.Set(&v)
}
// SetAttributesHashNil sets the value for AttributesHash to be an explicit nil
func (o *InstanceTypeView) SetAttributesHashNil() {
	o.AttributesHash.Set(nil)
}

// UnsetAttributesHash ensures that no value is present for AttributesHash, not even an explicit nil
func (o *InstanceTypeView) UnsetAttributesHash() {
	o.AttributesHash.Unset()
}

func (o InstanceTypeView) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InstanceTypeView) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Provider.IsSet() {
		toSerialize["provider"] = o.Provider.Get()
	}
	if o.Region.IsSet() {
		toSerialize["region"] = o.Region.Get()
	}
	if o.Zone.IsSet() {
		toSerialize["zone"] = o.Zone.Get()
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Cpu) {
		toSerialize["cpu"] = o.Cpu
	}
	if !IsNil(o.Accelerator) {
		toSerialize["accelerator"] = o.Accelerator
	}
	if !IsNil(o.Ram) {
		toSerialize["ram"] = o.Ram
	}
	if !IsNil(o.Storage) {
		toSerialize["storage"] = o.Storage
	}
	if !IsNil(o.Network) {
		toSerialize["network"] = o.Network
	}
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	if !IsNil(o.Availability) {
		toSerialize["availability"] = o.Availability
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if o.AttributesHash.IsSet() {
		toSerialize["attributes_hash"] = o.AttributesHash.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *InstanceTypeView) UnmarshalJSON(data []byte) (err error) {
	varInstanceTypeView := _InstanceTypeView{}

	err = json.Unmarshal(data, &varInstanceTypeView)

	if err != nil {
		return err
	}

	*o = InstanceTypeView(varInstanceTypeView)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "provider")
		delete(additionalProperties, "region")
		delete(additionalProperties, "zone")
		delete(additionalProperties, "type")
		delete(additionalProperties, "cpu")
		delete(additionalProperties, "accelerator")
		delete(additionalProperties, "ram")
		delete(additionalProperties, "storage")
		delete(additionalProperties, "network")
		delete(additionalProperties, "price")
		delete(additionalProperties, "availability")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "updated_at")
		delete(additionalProperties, "attributes_hash")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInstanceTypeView struct {
	value *InstanceTypeView
	isSet bool
}

func (v NullableInstanceTypeView) Get() *InstanceTypeView {
	return v.value
}

func (v *NullableInstanceTypeView) Set(val *InstanceTypeView) {
	v.value = val
	v.isSet = true
}

func (v NullableInstanceTypeView) IsSet() bool {
	return v.isSet
}

func (v *NullableInstanceTypeView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstanceTypeView(val *InstanceTypeView) *NullableInstanceTypeView {
	return &NullableInstanceTypeView{value: val, isSet: true}
}

func (v NullableInstanceTypeView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstanceTypeView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


