/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.2.8
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package perian

import (
	"encoding/json"
	"fmt"
)

// AcceleratorName Enum class representing the accelerator name.
type AcceleratorName string

// List of AcceleratorName
const (
	NVIDIA_H100_80 AcceleratorName = "NVIDIA_H100_80"
	NVIDIA_L4_24 AcceleratorName = "NVIDIA_L4_24"
	NVIDIA_A100_40 AcceleratorName = "NVIDIA_A100_40"
	NVIDIA_A100_80 AcceleratorName = "NVIDIA_A100_80"
	NVIDIA_T4_16 AcceleratorName = "NVIDIA_T4_16"
	NVIDIA_V100_16 AcceleratorName = "NVIDIA_V100_16"
	NVIDIA_V100_32 AcceleratorName = "NVIDIA_V100_32"
	NVIDIA_P100_16 AcceleratorName = "NVIDIA_P100_16"
	NVIDIA_P4_8 AcceleratorName = "NVIDIA_P4_8"
	NVIDIA_K80_12 AcceleratorName = "NVIDIA_K80_12"
	NVIDIA_L40_48 AcceleratorName = "NVIDIA_L40_48"
	NVIDIA_L40_S_48 AcceleratorName = "NVIDIA_L40S_48"
	NVIDIA_A40_48 AcceleratorName = "NVIDIA_A40_48"
	NVIDIA_A6000_48 AcceleratorName = "NVIDIA_A6000_48"
	NVIDIA_RTX6000_48 AcceleratorName = "NVIDIA_RTX6000_48"
	AMD_7900_XTX_24 AcceleratorName = "AMD_7900XTX_24"
	AMD_RX7900_XTX_24 AcceleratorName = "AMD_RX7900XTX_24"
)

// All allowed values of AcceleratorName enum
var AllowedAcceleratorNameEnumValues = []AcceleratorName{
	"NVIDIA_H100_80",
	"NVIDIA_L4_24",
	"NVIDIA_A100_40",
	"NVIDIA_A100_80",
	"NVIDIA_T4_16",
	"NVIDIA_V100_16",
	"NVIDIA_V100_32",
	"NVIDIA_P100_16",
	"NVIDIA_P4_8",
	"NVIDIA_K80_12",
	"NVIDIA_L40_48",
	"NVIDIA_L40S_48",
	"NVIDIA_A40_48",
	"NVIDIA_A6000_48",
	"NVIDIA_RTX6000_48",
	"AMD_7900XTX_24",
	"AMD_RX7900XTX_24",
}

func (v *AcceleratorName) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AcceleratorName(value)
	for _, existing := range AllowedAcceleratorNameEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AcceleratorName", value)
}

// NewAcceleratorNameFromValue returns a pointer to a valid AcceleratorName
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAcceleratorNameFromValue(v string) (*AcceleratorName, error) {
	ev := AcceleratorName(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AcceleratorName: valid values are %v", v, AllowedAcceleratorNameEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AcceleratorName) IsValid() bool {
	for _, existing := range AllowedAcceleratorNameEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AcceleratorName value
func (v AcceleratorName) Ptr() *AcceleratorName {
	return &v
}

type NullableAcceleratorName struct {
	value *AcceleratorName
	isSet bool
}

func (v NullableAcceleratorName) Get() *AcceleratorName {
	return v.value
}

func (v *NullableAcceleratorName) Set(val *AcceleratorName) {
	v.value = val
	v.isSet = true
}

func (v NullableAcceleratorName) IsSet() bool {
	return v.isSet
}

func (v *NullableAcceleratorName) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAcceleratorName(val *AcceleratorName) *NullableAcceleratorName {
	return &NullableAcceleratorName{value: val, isSet: true}
}

func (v NullableAcceleratorName) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAcceleratorName) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

