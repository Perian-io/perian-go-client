/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.2.8
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package perian

import (
	"encoding/json"
	"time"
)

// checks if the JobView type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JobView{}

// JobView Limited View on Model representation of a perian job.
type JobView struct {
	Id *string `json:"id,omitempty"`
	Status *JobStatus `json:"status,omitempty"`
	StartedAt NullableTime `json:"started_at,omitempty"`
	DoneAt NullableTime `json:"done_at,omitempty"`
	Logs NullableString `json:"logs,omitempty"`
	Errors NullableString `json:"errors,omitempty"`
	Price *PriceData `json:"price,omitempty"`
	DockerMetadata NullableDockerMetadata `json:"docker_metadata,omitempty"`
	RequirementMetadata NullableRequirementMetadata `json:"requirement_metadata,omitempty"`
	RuntimeMetadata *RuntimeMetadata `json:"runtime_metadata,omitempty"`
	CreatedAt *time.Time `json:"created_at,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _JobView JobView

// NewJobView instantiates a new JobView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJobView() *JobView {
	this := JobView{}
	var status JobStatus = JOBSTATUS_UNDEFINED
	this.Status = &status
	var price PriceData = *NewPriceData()
	this.Price = &price
	var runtimeMetadata RuntimeMetadata = *NewRuntimeMetadata()
	this.RuntimeMetadata = &runtimeMetadata
	return &this
}

// NewJobViewWithDefaults instantiates a new JobView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJobViewWithDefaults() *JobView {
	this := JobView{}
	var status JobStatus = JOBSTATUS_UNDEFINED
	this.Status = &status
	var price PriceData = *NewPriceData()
	this.Price = &price
	var runtimeMetadata RuntimeMetadata = *NewRuntimeMetadata()
	this.RuntimeMetadata = &runtimeMetadata
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *JobView) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobView) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *JobView) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *JobView) SetId(v string) {
	o.Id = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *JobView) GetStatus() JobStatus {
	if o == nil || IsNil(o.Status) {
		var ret JobStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobView) GetStatusOk() (*JobStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *JobView) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given JobStatus and assigns it to the Status field.
func (o *JobView) SetStatus(v JobStatus) {
	o.Status = &v
}

// GetStartedAt returns the StartedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JobView) GetStartedAt() time.Time {
	if o == nil || IsNil(o.StartedAt.Get()) {
		var ret time.Time
		return ret
	}
	return *o.StartedAt.Get()
}

// GetStartedAtOk returns a tuple with the StartedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JobView) GetStartedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.StartedAt.Get(), o.StartedAt.IsSet()
}

// HasStartedAt returns a boolean if a field has been set.
func (o *JobView) HasStartedAt() bool {
	if o != nil && o.StartedAt.IsSet() {
		return true
	}

	return false
}

// SetStartedAt gets a reference to the given NullableTime and assigns it to the StartedAt field.
func (o *JobView) SetStartedAt(v time.Time) {
	o.StartedAt.Set(&v)
}
// SetStartedAtNil sets the value for StartedAt to be an explicit nil
func (o *JobView) SetStartedAtNil() {
	o.StartedAt.Set(nil)
}

// UnsetStartedAt ensures that no value is present for StartedAt, not even an explicit nil
func (o *JobView) UnsetStartedAt() {
	o.StartedAt.Unset()
}

// GetDoneAt returns the DoneAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JobView) GetDoneAt() time.Time {
	if o == nil || IsNil(o.DoneAt.Get()) {
		var ret time.Time
		return ret
	}
	return *o.DoneAt.Get()
}

// GetDoneAtOk returns a tuple with the DoneAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JobView) GetDoneAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.DoneAt.Get(), o.DoneAt.IsSet()
}

// HasDoneAt returns a boolean if a field has been set.
func (o *JobView) HasDoneAt() bool {
	if o != nil && o.DoneAt.IsSet() {
		return true
	}

	return false
}

// SetDoneAt gets a reference to the given NullableTime and assigns it to the DoneAt field.
func (o *JobView) SetDoneAt(v time.Time) {
	o.DoneAt.Set(&v)
}
// SetDoneAtNil sets the value for DoneAt to be an explicit nil
func (o *JobView) SetDoneAtNil() {
	o.DoneAt.Set(nil)
}

// UnsetDoneAt ensures that no value is present for DoneAt, not even an explicit nil
func (o *JobView) UnsetDoneAt() {
	o.DoneAt.Unset()
}

// GetLogs returns the Logs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JobView) GetLogs() string {
	if o == nil || IsNil(o.Logs.Get()) {
		var ret string
		return ret
	}
	return *o.Logs.Get()
}

// GetLogsOk returns a tuple with the Logs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JobView) GetLogsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Logs.Get(), o.Logs.IsSet()
}

// HasLogs returns a boolean if a field has been set.
func (o *JobView) HasLogs() bool {
	if o != nil && o.Logs.IsSet() {
		return true
	}

	return false
}

// SetLogs gets a reference to the given NullableString and assigns it to the Logs field.
func (o *JobView) SetLogs(v string) {
	o.Logs.Set(&v)
}
// SetLogsNil sets the value for Logs to be an explicit nil
func (o *JobView) SetLogsNil() {
	o.Logs.Set(nil)
}

// UnsetLogs ensures that no value is present for Logs, not even an explicit nil
func (o *JobView) UnsetLogs() {
	o.Logs.Unset()
}

// GetErrors returns the Errors field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JobView) GetErrors() string {
	if o == nil || IsNil(o.Errors.Get()) {
		var ret string
		return ret
	}
	return *o.Errors.Get()
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JobView) GetErrorsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Errors.Get(), o.Errors.IsSet()
}

// HasErrors returns a boolean if a field has been set.
func (o *JobView) HasErrors() bool {
	if o != nil && o.Errors.IsSet() {
		return true
	}

	return false
}

// SetErrors gets a reference to the given NullableString and assigns it to the Errors field.
func (o *JobView) SetErrors(v string) {
	o.Errors.Set(&v)
}
// SetErrorsNil sets the value for Errors to be an explicit nil
func (o *JobView) SetErrorsNil() {
	o.Errors.Set(nil)
}

// UnsetErrors ensures that no value is present for Errors, not even an explicit nil
func (o *JobView) UnsetErrors() {
	o.Errors.Unset()
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *JobView) GetPrice() PriceData {
	if o == nil || IsNil(o.Price) {
		var ret PriceData
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobView) GetPriceOk() (*PriceData, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *JobView) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given PriceData and assigns it to the Price field.
func (o *JobView) SetPrice(v PriceData) {
	o.Price = &v
}

// GetDockerMetadata returns the DockerMetadata field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JobView) GetDockerMetadata() DockerMetadata {
	if o == nil || IsNil(o.DockerMetadata.Get()) {
		var ret DockerMetadata
		return ret
	}
	return *o.DockerMetadata.Get()
}

// GetDockerMetadataOk returns a tuple with the DockerMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JobView) GetDockerMetadataOk() (*DockerMetadata, bool) {
	if o == nil {
		return nil, false
	}
	return o.DockerMetadata.Get(), o.DockerMetadata.IsSet()
}

// HasDockerMetadata returns a boolean if a field has been set.
func (o *JobView) HasDockerMetadata() bool {
	if o != nil && o.DockerMetadata.IsSet() {
		return true
	}

	return false
}

// SetDockerMetadata gets a reference to the given NullableDockerMetadata and assigns it to the DockerMetadata field.
func (o *JobView) SetDockerMetadata(v DockerMetadata) {
	o.DockerMetadata.Set(&v)
}
// SetDockerMetadataNil sets the value for DockerMetadata to be an explicit nil
func (o *JobView) SetDockerMetadataNil() {
	o.DockerMetadata.Set(nil)
}

// UnsetDockerMetadata ensures that no value is present for DockerMetadata, not even an explicit nil
func (o *JobView) UnsetDockerMetadata() {
	o.DockerMetadata.Unset()
}

// GetRequirementMetadata returns the RequirementMetadata field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JobView) GetRequirementMetadata() RequirementMetadata {
	if o == nil || IsNil(o.RequirementMetadata.Get()) {
		var ret RequirementMetadata
		return ret
	}
	return *o.RequirementMetadata.Get()
}

// GetRequirementMetadataOk returns a tuple with the RequirementMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JobView) GetRequirementMetadataOk() (*RequirementMetadata, bool) {
	if o == nil {
		return nil, false
	}
	return o.RequirementMetadata.Get(), o.RequirementMetadata.IsSet()
}

// HasRequirementMetadata returns a boolean if a field has been set.
func (o *JobView) HasRequirementMetadata() bool {
	if o != nil && o.RequirementMetadata.IsSet() {
		return true
	}

	return false
}

// SetRequirementMetadata gets a reference to the given NullableRequirementMetadata and assigns it to the RequirementMetadata field.
func (o *JobView) SetRequirementMetadata(v RequirementMetadata) {
	o.RequirementMetadata.Set(&v)
}
// SetRequirementMetadataNil sets the value for RequirementMetadata to be an explicit nil
func (o *JobView) SetRequirementMetadataNil() {
	o.RequirementMetadata.Set(nil)
}

// UnsetRequirementMetadata ensures that no value is present for RequirementMetadata, not even an explicit nil
func (o *JobView) UnsetRequirementMetadata() {
	o.RequirementMetadata.Unset()
}

// GetRuntimeMetadata returns the RuntimeMetadata field value if set, zero value otherwise.
func (o *JobView) GetRuntimeMetadata() RuntimeMetadata {
	if o == nil || IsNil(o.RuntimeMetadata) {
		var ret RuntimeMetadata
		return ret
	}
	return *o.RuntimeMetadata
}

// GetRuntimeMetadataOk returns a tuple with the RuntimeMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobView) GetRuntimeMetadataOk() (*RuntimeMetadata, bool) {
	if o == nil || IsNil(o.RuntimeMetadata) {
		return nil, false
	}
	return o.RuntimeMetadata, true
}

// HasRuntimeMetadata returns a boolean if a field has been set.
func (o *JobView) HasRuntimeMetadata() bool {
	if o != nil && !IsNil(o.RuntimeMetadata) {
		return true
	}

	return false
}

// SetRuntimeMetadata gets a reference to the given RuntimeMetadata and assigns it to the RuntimeMetadata field.
func (o *JobView) SetRuntimeMetadata(v RuntimeMetadata) {
	o.RuntimeMetadata = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *JobView) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobView) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *JobView) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *JobView) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *JobView) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobView) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *JobView) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *JobView) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

func (o JobView) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JobView) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if o.StartedAt.IsSet() {
		toSerialize["started_at"] = o.StartedAt.Get()
	}
	if o.DoneAt.IsSet() {
		toSerialize["done_at"] = o.DoneAt.Get()
	}
	if o.Logs.IsSet() {
		toSerialize["logs"] = o.Logs.Get()
	}
	if o.Errors.IsSet() {
		toSerialize["errors"] = o.Errors.Get()
	}
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	if o.DockerMetadata.IsSet() {
		toSerialize["docker_metadata"] = o.DockerMetadata.Get()
	}
	if o.RequirementMetadata.IsSet() {
		toSerialize["requirement_metadata"] = o.RequirementMetadata.Get()
	}
	if !IsNil(o.RuntimeMetadata) {
		toSerialize["runtime_metadata"] = o.RuntimeMetadata
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *JobView) UnmarshalJSON(data []byte) (err error) {
	varJobView := _JobView{}

	err = json.Unmarshal(data, &varJobView)

	if err != nil {
		return err
	}

	*o = JobView(varJobView)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "status")
		delete(additionalProperties, "started_at")
		delete(additionalProperties, "done_at")
		delete(additionalProperties, "logs")
		delete(additionalProperties, "errors")
		delete(additionalProperties, "price")
		delete(additionalProperties, "docker_metadata")
		delete(additionalProperties, "requirement_metadata")
		delete(additionalProperties, "runtime_metadata")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "updated_at")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableJobView struct {
	value *JobView
	isSet bool
}

func (v NullableJobView) Get() *JobView {
	return v.value
}

func (v *NullableJobView) Set(val *JobView) {
	v.value = val
	v.isSet = true
}

func (v NullableJobView) IsSet() bool {
	return v.isSet
}

func (v *NullableJobView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJobView(val *JobView) *NullableJobView {
	return &NullableJobView{value: val, isSet: true}
}

func (v NullableJobView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJobView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


